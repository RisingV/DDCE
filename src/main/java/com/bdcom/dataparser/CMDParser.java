package com.bdcom.dataparser;

import com.bdcom.datadispacher.DataSender;
import com.bdcom.nio.exception.GlobalException;
import com.bdcom.sys.config.ServerConfig;
import com.bdcom.datadispacher.http.HttpClientWrapper;
import com.bdcom.nio.exception.ResponseException;
import com.bdcom.nio.client.ClientProxy;
import com.bdcom.biz.pojo.BaseTestRecord;
import com.bdcom.sys.AppSession;
import com.bdcom.sys.gui.Application;
import com.bdcom.sys.config.PathConfig;
import com.bdcom.util.SerializeUtil;
import org.jargp.*;

import java.io.IOException;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-10-31 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public class CMDParser {
	
	private static final String SYS_TMP_DIR_POR = "java.io.tmpdir";
	
	private static final String DEFAULT_SYS_TMP_DIR = System.getProperty( SYS_TMP_DIR_POR );
	
	public static final String BDCOM_PREFIX = "BD-";
	
	private static final String CACHE_FILE_NAME = BDCOM_PREFIX + "N105ky1nUK.ser";
	
	/** Command line parameter definitions. */
	private static final ParameterDef[] BASE_PARM_DEFS = {
		new StringDef('p', "testerNum", "number of the tester"),
		new StringDef('t', "type", "test type"),
		new StringDef('b', "beginTime", "begin time of test"),
		new StringDef('s', "script", "name of test script"),
		new StringDef('c', "consoleName", "name of console"),
		new StringDef('n', "serialNumber", "serial number"),
		new StringDef('i', "id", "ID"),
		new StringDef('e', "verOfEPROM", "version of EPROM"),
		new StringDef('f', "volOfFlash", "volume of flash"),
		new StringDef('r', "volOfDRam", "volume of SDRam"),
		new StringDef('v', "softwareInfo", "information of software"),
		new StringDef('h', "hardwareInfo", "information of hardware"),
		new StringDef('m', "modelType", "model type"),
		new StringDef('d', "endTime", "end time of test"),
		new StringDef('a', "status", "test status"),
		new StringDef('z', "mac", "MAC"),
		new StringDef('u', "step", "STEP"),
		new StringDef('o', "memo", "MEMO"),
		new StringDef('#', "randomID", "random ID"),
		new BoolDef('?', "helpFlag", "display usage information"),
		new BoolDef('$', "ifCommit", "if commit this test record")
	};
	
	public static void main(String[] args) {
		final ArgumentProcessor proc = new ArgumentProcessor(BASE_PARM_DEFS);
		
		final String cacheFileSavePath = DEFAULT_SYS_TMP_DIR + CACHE_FILE_NAME;
		BaseTestRecord record = (BaseTestRecord) SerializeUtil.deserializeFromFile(cacheFileSavePath);
		if ( null == record ) {
			record = new BaseTestRecord();
		}
		
		if (args.length > 0) {
			proc.processArgs(args, record);
			StringTracker xargs = proc.getArgs();
			while (xargs.hasNext()) {
				System.out.println("extra argument: " + xargs.next());
			}

		} else {
			record.setHelpFlag(true);
		}
		
		// print usage information if problem with parameters
		if ( record.isHelpFlag() ) {
			System.out.println("\nUsage: java com.bdcom.datadispacher.CMDParser [-options] extra\n" +
				"Options are:");
			proc.listParameters(80, System.out);
		}
		
		
	}

    private static void commitRecord(BaseTestRecord record) {
        PathConfig pathConfig = new PathConfig(Application.CURRENT_DIR);
        ServerConfig serverConfig = new ServerConfig( pathConfig );

        ClientProxy client = new ClientProxy(serverConfig);

        int status = 0;
        try {
            status = client.sendBaseTestRecord(record);
        } catch (IOException e) {
            e.printStackTrace();
        } catch (ResponseException e) {
            e.printStackTrace();
        } catch (GlobalException e) {
            e.printStackTrace();  //To change body of catch statement use File | Settings | File Templates.
        }
    }

	
	private static void commitDebugRecord(BaseTestRecord record) {
		HttpClientWrapper client = HttpClientWrapper.getInstance(); 
		String serialNo = record.getSerialNumber();
		String random = record.getRandomID();
		if ( !client.markDebugRecViaHttp(serialNo, random) ) {
			return;
		}
	
		getDataSender().sendRecordWithTalk(record);
	}
	
	private static DataSender getDataSender() {
		return AppSession.getDataSender();
	}
	
}
