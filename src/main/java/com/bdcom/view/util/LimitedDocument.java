package com.bdcom.view.util;

import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.PlainDocument;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-12-18 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public class LimitedDocument extends PlainDocument{

    /**VersionUID */
    private static final long serialVersionUID = 1L;
    
    public static final String ALPHABET_CAPITAL = "[A-Z]*";

    public static final String ALPHABET_SMALL = "[a-z]*";

    public static final String ALPHABET = "[a-zA-Z]*";

    public static final String NUMBER = "[0-9]*";
    
    public static final String IPNUMBER = "[.0-9]*";

    public static final String IP_FORMAT = "(((2[0-4]\\d)|(25[0-5]))|(1\\d{2})|([1-9]\\d)|(\\d))[.](((2[0-4]\\d)"
            + "|(25[0-5]))|(1\\d{2})|([1-9]\\d)|(\\d))[.](((2[0-4]\\d)|(25[0-5]))|(1\\d{2})|([1-9]\\d)|(\\d))[.]((("
            + "2[0-4]\\d)|(25[0-5]))|(1\\d{2})|([1-9]\\d)|(\\d))";

    public static final String MAC = "[0-9A-Fa-f]*";
//    public static final String MARK =  "[ -/:-@\\[-`{-~]*";

//    public static final String ASCII = "[a-zA-Z0-9 -/:-@\\[-`{-~]*";
    
    /** change Line */
    public static final String CHANGE_LINE = "\n";   
  
    /** Max Range */
    private static final long MAX_RANG_FINAL = 0x7fffffffffffffffL;

    private int limitationType_;

    private String limitationValue_;

    private int limitationLength_;

    private boolean enterCheck_ = false;
    
    private boolean numRangeCheck_;

    private long maxRange_;

    /** check mode */
    private boolean checkMode_;


    public LimitedDocument(int strLen) {
        numRangeCheck_ = false;
        maxRange_ = MAX_RANG_FINAL;
        checkMode_ = true;
        limitationType_ = 0;
        limitationValue_ = "";
        limitationLength_ = strLen;
    }


    public LimitedDocument() {
        numRangeCheck_ = false;
        maxRange_ = MAX_RANG_FINAL;
        checkMode_ = true;
        limitationType_ = 0;
        limitationValue_ = "";
        limitationLength_ = 0;
    }


    public LimitedDocument(String s, int i) {
        numRangeCheck_ = false;
        maxRange_ = MAX_RANG_FINAL;
        checkMode_ = true;
        limitationType_ = 0;
        limitationValue_ = s;
        limitationLength_ = i;
    }
    
    public LimitedDocument(String s) {
        numRangeCheck_ = false;
        maxRange_ = MAX_RANG_FINAL;
        checkMode_ = true;
        limitationType_ = 0;
        limitationValue_ = s;
    }

    public LimitedDocument(int i, String s, int j) {
        numRangeCheck_ = false;
        maxRange_ = MAX_RANG_FINAL;
        checkMode_ = true;
        limitationType_ = i;
        limitationValue_ = s;
        limitationLength_ = j;
    }

    public void setLimitationType(int i) {
        limitationType_ = i;
    }

    public int getLimitationType() {
        return limitationType_;
    }

    public void setLimitationValue(String s) {
        limitationValue_ = s;
    }


    public String getLimitationValue() {
        return limitationValue_;
    }

    public void setLimitationLength(int i) {
        limitationLength_ = i;
    }

    public void setLimitationMaxNum(long l) {
        numRangeCheck_ = true;
        maxRange_ = l;
    }

    public void setLimitationByteMode(boolean flag) {
        checkMode_ = flag;
    }

    public void setEnterCheckModi(boolean flag) {
        enterCheck_ = flag;
    }
    
    public int getLimitationLength() {
        return limitationLength_;
    }

    public void insertString(int index, String insertMsg, AttributeSet attributeset)
        throws BadLocationException {
        if ( !"".equals(limitationValue_) ) {
            if ( !insertMsg.matches(limitationValue_) && attributeset == null ) {
                return;
            }
        }
        if ( limitationLength_ != 0 ) {
            if ( checkMode_ ) {
                int length = getLength();
                String s2 = getText(0, length);
                int len = limitationLength_ - s2.getBytes().length;
                if ( enterCheck_ ) {
                    String changeLineTmp = s2 + " ";
                    int enter = changeLineTmp.split(CHANGE_LINE).length - 1;
                    len += enter;
                }
                int insertMsglen = insertMsg.getBytes().length;
                if ( len < insertMsglen ) {
                    byte abyte0[] = insertMsg.getBytes();
                    byte abyte1[] = new byte[len];
                    for ( int k1 = 0; k1 < len; k1++ ) {
                        abyte1[k1] = abyte0[k1];
                    }
                    insertMsg = new String(abyte1);
                }
                int newInsertMsglen = insertMsg.getBytes().length;
                if ( attributeset == null && newInsertMsglen > len ) {
                    return;
                }
            } else if ( attributeset == null && getLength() >= limitationLength_ ) {
                return;
            }
        }
        if ( numRangeCheck_ ) {
            int length = getLength();
            String text = getText(0, length);
            StringBuffer stringbuffer = new StringBuffer(text);
            stringbuffer.insert(index, insertMsg);
            
            long range = 0L;
            try {
                range = Long.parseLong(stringbuffer.toString());
            } catch ( NumberFormatException e ) {
                return;
            }
            
            if ( maxRange_ < range ) {
                return;
            }
            String s3 = String.valueOf(range);
            if ( stringbuffer.length() != s3.length() ) {
                return;
            }
        }
        try {
            super.insertString(index, insertMsg, attributeset);
        } catch ( BadLocationException badlocationexception ) {
            throw badlocationexception;
        }
    }

	
}