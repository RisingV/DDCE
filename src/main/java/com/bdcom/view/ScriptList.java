package com.bdcom.view;

import com.bdcom.view.util.GBC;
import com.bdcom.sys.Applicable;
import com.bdcom.sys.ApplicationConstants;
import com.bdcom.biz.script.ScriptMgr;
import com.bdcom.util.LocaleUtil;
import com.bdcom.util.StringUtil;

import javax.swing.*;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.*;
import java.util.List;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2013-3-4 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public class ScriptList extends JPanel implements ViewTab, ApplicationConstants {

	private static final long serialVersionUID = -2938062870489203264L;

	private JTable table;
	
	private TableModel model;
	
	private JScrollPane span;
	
	private JButton refBt;

    private Applicable app;
	
	public ScriptList(Applicable app) {
        this.app = app;
		model = new TableModel();
		table = new JTable(model);
		table.setBackground(Color.white);
		initRefBt();
		
		TableColumnModel tcm = table.getColumnModel();
		tcm.getColumn(0).setPreferredWidth(50);
		tcm.getColumn(1).setPreferredWidth(200);
		tcm.getColumn(2).setPreferredWidth(50);
		//table.setPreferredSize(new Dimension(240, 500));
		
		span = new JScrollPane(table);
		span.setPreferredSize( new Dimension(800, 600) );
		
		JSeparator sepH0 = new JSeparator(SwingConstants.HORIZONTAL);
		sepH0.setPreferredSize( new Dimension(810,2) );
		sepH0.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
		
		this.setLayout(new GridBagLayout());
		this.add(span, new GBC(0,0));
		this.add(sepH0,new GBC(0,1).setInsets(5));
		this.add(refBt,new GBC(0,2).setInsets(5, 640, 5, 50));
		refresh();
	}
	
	public void refresh() {
		clearAll();
        ScriptMgr scriptMgr =
                (ScriptMgr) app.getAttribute(COMPONENT.SCRIPT_MGR);
        Set<String> set = scriptMgr.indexingSerials("");
		List<String> list = new ArrayList<String>();
		if ( null != set && !set.isEmpty()) {
			for (String s : set) {
				list.add(s);
			}
			Collections.sort(list, Collections.reverseOrder());
		}
		
		if ( list.isEmpty() ) {
			return;
		}
		
		for (String num : list) {
			String path = scriptMgr.getScriptPath(num);
			String index = scriptMgr.getBeginIndex(num);
			if (StringUtil.isNotBlank(path) && StringUtil.isNotBlank(index)) {
				addRow(num, path, index);
			}
		}
	}
	
	private void initRefBt() {
		if ( null == refBt ) {
			refBt = new JButton(LocaleUtil.getLocalName(REFRESH_BT));
			refBt.setPreferredSize(new Dimension(80, 25));
			refBt.addActionListener(new ActionListener(){
				@Override
				public void actionPerformed(ActionEvent e) {
					 refresh();
				}
			});
		}
	}
	
	public void addRow(String num, String path, String index) {
		model.addRow(num, path, index);
		table.updateUI();
	}
	
	public void clearAll() {
		model.removeAll();
		table.updateUI();
	}
	
	class TableModel extends AbstractTableModel implements ApplicationConstants {
		
		private static final long serialVersionUID = 5393179649072177826L;

		private Vector<Vector<String>> content;
		
		private String[] titleNames = {
				LocaleUtil.getLocalName(SERIAL_NUM),
				LocaleUtil.getLocalName(SCRIPT_PATH),
				LocaleUtil.getLocalName(BEGIN_INDEX)
		};
		
		public TableModel() {
			content = new Vector<Vector<String>>();
		}
		
		public void addRow(String num, String path, String index) {
			  Vector<String> v = new Vector<String>(3);
			  v.add(0, num);
			  v.add(1, path);
			  v.add(2, index);
			  content.add(v);
		}
		
		public void removeAll() {
			content.removeAllElements();
		}
		
		public void removeRow(int row) {
			  content.remove(row);
		}
		
		public void removeRows(int row, int count) {
			  for (int i = 0; i < count; i++) {
				   if (content.size() > row) {
				    content.remove(row);
				   }
			  }
		}
		
		public String getColumnName(int col) {
			  return titleNames[col];
		}
		
		public boolean isCellEditable(int rowIndex, int columnIndex) {
			return false;
		}
		
		public void setValueAt(Object value, int row, int col) {
			  ((Vector<String>) content.get(row)).remove(col);
			  ((Vector<String>) content.get(row)).add(col, (String)value);
			  this.fireTableCellUpdated(row, col);
		}
		
		@Override
		public int getRowCount() {
			return content.size();
		}

		@Override
		public int getColumnCount() {
			return titleNames.length;
		}

		@Override
		public Object getValueAt(int rowIndex, int columnIndex) {
			return ((Vector<String>) content.get(rowIndex)).get(columnIndex);
		}
		
	}
	
	private JPanel thisPanel = this;
	
	private String tabTitle;
	
	private Icon tabIcon;
	
	private String tabTip;

	public void setTabTitle(String tabTitle) {
		this.tabTitle = tabTitle;
	}

	public String getTabTitle() {
		return tabTitle;
	}

	public void setTabIcon(Icon tabIcon) {
		this.tabIcon = tabIcon;
	}

	public Icon getTabIcon() {
		return tabIcon;
	}

	public Component getTabComponent() {
		return thisPanel;
	}

	public void setTabTip(String tabTip) {
		this.tabTip = tabTip;
	}

	public String getTabTip() {
		return tabTip;
	}

}
