package com.bdcom.dce.sys;

import com.bdcom.dce.view.AbstractFrame;
import com.bdcom.dce.view.MsgTable;
import com.bdcom.dce.view.ViewManager;
import com.bdcom.dce.view.util.AppConstants;
import com.bdcom.dce.datadispacher.DataSender;
import com.bdcom.dce.datadispacher.ServerInfo;
import com.bdcom.dce.biz.pojo.BaseTestRecord;
import com.bdcom.dce.biz.pojo.Scenario;
import com.bdcom.dce.biz.script.ScriptExecutor;
import com.bdcom.dce.sys.gui.Application;
import com.bdcom.dce.util.SerializeUtil;
import com.bdcom.dce.util.LocaleUtil;
import com.bdcom.dce.util.StringUtil;

import java.io.File;
import java.io.FilenameFilter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.Map.Entry;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-11-14 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public abstract class AppSession 
					implements AppConstants {
	
	public static final DateFormat DATE_FORMAT = 
							new SimpleDateFormat("yyyy-MM-dd-HH-mm-ss"); 
	
	public static final String CURRENT_DIR = System.getProperty("user.dir");
	
	private static final String SCENARIO_DIR = "Scenarios" + ConfigPath._SPT;
	
	private static final String END_FIX = ".sce";
	
	// must be same as the field name of BaseTestRecord's "testerNum" field
	public static final String TEST_NUM = "testerNum"; 
	
	private static String sessionId;
	
	private static DataSender dataSender;
	
	private static ScriptExecutor scriptExecutor;

	private static String _testNum;
	
	private static ViewManager viewManager;
	
	private static AbstractFrame _mainFrame;
	
	private static AbstractFrame _loginFrame;
	
	private static MsgTable _msgTable;
	
	private static boolean isLogined = false;
	
	private static boolean isRoot = false;
	
	private static boolean isFC= false;
	
	private static Map<String, Scenario> _preProvidedScenarios;
	
	private static Map<Long, String> _scenarioIdFastEntry;
	
	private static Map<String, Scenario> _serialMapping;
	
	static {
		
		sessionId = generateSessionId();
		
//		getSavedScenarios();//TODO
	}
	
	public static void reloadScenarios() {
		if ( null != _preProvidedScenarios ) {
			_preProvidedScenarios.clear();
		}
		if ( null != _scenarioIdFastEntry ) {
			_scenarioIdFastEntry.clear();
		}
		if ( null != _serialMapping ) {
			_serialMapping.clear();
		}
		getSavedScenarios();
	}
	
	public static boolean isFC() {
		return isFC;
	}
	
	public static void setIsFC(boolean _isFC) {
		isFC = _isFC;
	}
	
	public static void initDataSender(String ip, String port) {
		ServerInfo.setIpAndPort(ip, port);
		dataSender = new DataSender(
				ServerInfo.getInetAddr(),
				ServerInfo.getPort()
				);
	}
	
	public static DataSender getDataSender() {
		if ( null == dataSender ) {
			dataSender = new DataSender(
					ServerInfo.getInetAddr(),
					ServerInfo.getPort()
					);
		}
		return dataSender;
	}
	
	public static ScriptExecutor getScriptExecutor() {
		if ( null == scriptExecutor ) {
			scriptExecutor = new ScriptExecutor(Application.instance);
		}
		return scriptExecutor;
	}
	
	public static void terminalLogin() {
		if ( null != dataSender ) {
			dataSender.terminal();
		}
		String logoutMsg = 
				LocaleUtil.getLocalName(LOGOUT_MSG);
		getMsgTable().addSysMsg(
				getTestNum() + logoutMsg
				);
		isLogined = false;
		isRoot = false;
	}
	
	public static void terminalApp() {
		terminalLogin();
		dataSender = null;
		getScriptExecutor().killAllRunningScript();
		if ( null != _mainFrame ) {
			_mainFrame.hideFrame();
			viewManager.reinit();
		}
		if ( null != _loginFrame ) {
			_loginFrame.display();
		}
		System.gc();
	}
	
	public static void registerTestNum(String testNum, int status) {
		if ( status > 1) {
			isRoot = true;
		}
		
		if (StringUtil.isNotBlank(testNum) ) {
			isLogined = true;
		}
		_testNum = testNum;
	}
	
	public static boolean isRoot() {
		return isRoot;
	}
	
	public static String getTestNum() {
		return _testNum;
	}
	
	public static String getSessionId() {
		return sessionId;
	}
	
	public static MsgTable getMsgTable() {
		return _msgTable;
	}
	
	public static void registerMsgTable(MsgTable msgTable) {
		_msgTable = msgTable;
	}
	
	public static void registerMainFrame(AbstractFrame mainFrame) {
		_mainFrame = mainFrame;
	}
	
	public static void registerLoginFrame(AbstractFrame loginFrame) {
		_loginFrame = loginFrame;
	}
	
	public static void registerViewManager(ViewManager _viewManager) {
		viewManager = _viewManager;
	}
	
	public static AbstractFrame getMainFrame() {
		if ( isLogined ) {
			return _mainFrame;
		} else {
			return _loginFrame;
		}
	}
	
	public static BaseTestRecord getNewDataRecord() {
		BaseTestRecord dataRec = new BaseTestRecord();
		dataRec.setTesterNum(
				AppSession.getTestNum()
				);
		return dataRec;
	}
	
	public static void addPreProvidedScenario(Scenario scenario) {
		addPreProvidedScenario(
				scenario.getScenarioName(),
				scenario
				);
	}
	
	public static void addPreProvidedScenario(String scenarioName, 
			Scenario scenario) {
		
		if (null == scenarioName) {
			scenarioName = "SEC" + DATE_FORMAT.format(new Date());
			scenario.setScenarioName(scenarioName);
		}
		
		String serial = scenario.getSerialNum();
		addToScenarioEntry( scenarioName, scenario );
		addToSerialMapping( serial, scenario );
		
		saveDefindScenario(scenarioName);
	}
	
	private static void addToSerialMapping(String serial, 
			Scenario scenario) {
		if ( null == _serialMapping ) {
			_serialMapping = new HashMap<String, Scenario>();
		}
		_serialMapping.put(serial, scenario);
	}
	
	public static Scenario getScenarioByFullSerial(String serial) {
		if ( null != _serialMapping && !_serialMapping.isEmpty() ) {
			return _serialMapping.get(serial);
		} 
		return null;
	}
	
	public static Scenario getScenarioBySerial(String serial) {
		if ( null != _serialMapping && !_serialMapping.isEmpty() ) {
			Set<String> serialNums = _serialMapping.keySet();
			for (String ser : serialNums) {
				Scenario sce = _serialMapping.get(ser);
				int beginIndex = sce.getBeginIndex(); 
				if ( beginIndex + ser.length() > serial.length() ) {
					continue;
				} else {
					String matchingStr = serial.substring(beginIndex, beginIndex + ser.length());
					if (matchingStr.equals(ser)) {
						return sce;
					}
				}
			}
		} 
		return null;
	}
	
	private static void addToScenarioEntry(String scenarioName, 
			Scenario scenario) {
		
		if (null == _preProvidedScenarios) {
			_preProvidedScenarios = new HashMap<String, Scenario>();
		}
		if (null == _scenarioIdFastEntry) {
			_scenarioIdFastEntry = new HashMap<Long, String>();
		}
		
		long sid = scenario.getId();
		if ( sid < 0 ) {
			scenario.idAutoIncrease();
		} else { //update ScenarioName
			String oldSceName = _scenarioIdFastEntry.get(
									new Long(sid)
								);
			_preProvidedScenarios.remove(oldSceName); 
		}
		
		//scenario.putAttr(TEST_NUM, _testNum);
		_preProvidedScenarios.put(scenarioName, scenario);
		_scenarioIdFastEntry.put( new Long( scenario.getId() ), 
								scenarioName
							);
	}
	
	public static Scenario getDefinedScenario(String sceName) {
		if ( null == _preProvidedScenarios ) {
			return null;
		} else {
			Scenario sce = _preProvidedScenarios.get(sceName);
//			if ( null != sce ) {
//				sce.putAttr(TEST_NUM, _testNum);
//			}
			return sce;
		}
	}
	
	public static Set<String> getScenarioList() {
		if ( null == _preProvidedScenarios ) {
			return new LinkedHashSet<String>();
		} else {
			return _preProvidedScenarios.keySet();
		}
	}
	
	public static boolean isScenarioNameReduplicated(Scenario scenario) {
		String currentName = scenario.getScenarioName();
		Scenario savedSce = getDefinedScenario(currentName);
		if ( null == savedSce ) {
			return false;
		} else {
			if ( scenario.getId() == savedSce.getId() ) {
				return false;
			} else {
				return true;
			}
		}
		
	}
	
	public static void removeDefindScenario(String scenarioName) {
		if ( null == _preProvidedScenarios ) {
			return;
		}
		
		_preProvidedScenarios.remove(scenarioName); 
		SerializeUtil.delSerializedFile(
                getPathToSave(scenarioName)
        );
		
	}
	
	public static void saveDefindScenario(String scenarioName) {
		Scenario sce = null;
		if ( null != _preProvidedScenarios ) {
			sce = _preProvidedScenarios.get(scenarioName);
			if (null != sce) {
				SerializeUtil.serializeToFile(
                        sce,
                        getPathToSave(
                                sce.getScenarioName()
                        )
                );
			} 
		}
		
	}
	
	public static void saveDefinedScenarios() {
		
		if ( null == _preProvidedScenarios ) {
			return;
		}
		
		for ( Entry<String, Scenario> entry :
			_preProvidedScenarios.entrySet() ) {
			SerializeUtil.serializeToFile(
                    entry.getValue(),
                    getPathToSave(
                            entry.getKey()
                    )
            );
		}
		
	}
	
	private static String getPathToSave(String sName) {
		StringBuffer sb = new StringBuffer();
		sb.append(ConfigPath.getConfDir())
		  .append(SCENARIO_DIR);
		File sceDir = new File(sb.toString());
		if ( !sceDir.exists() ) {
			sceDir.mkdir();
		}
	    sb.append(sName)
		  .append(END_FIX);
		
		return sb.toString();
	}
	
	private static String generateSessionId() {
		return StringUtil.getRandomString(15);
	}
	 
	private static void getSavedScenarios() {
		StringBuffer sb = new StringBuffer();
		sb.append(ConfigPath.getConfDir()).append(SCENARIO_DIR);
		
		File sceDir = new File(sb.toString());
		if (sceDir.isDirectory()) {
			File[] savedFiles = sceDir.listFiles(
					new FilenameFilter() {
						public boolean accept(File dir, String name) {
							if ( name.endsWith( END_FIX ) ) {
								return true;
							} else {
								return false;
							}
						}
					}
					);
			for ( File savedFile : savedFiles ) {
				Object obj = SerializeUtil.deserializeFromFile(savedFile);
				Scenario sce = (Scenario) obj;
				if ( null == _preProvidedScenarios ) {
					_preProvidedScenarios = new HashMap<String, Scenario>();
				}
				_preProvidedScenarios.put(
						sce.getScenarioName(),
						sce
						);
				addToSerialMapping(
						sce.getSerialNum(),
						sce
						);
			}
		}
		if ( null != _preProvidedScenarios ) {
			Collection<Scenario> preSces = _preProvidedScenarios.values();
			Scenario.calcMaxId(preSces);
			if ( null == _scenarioIdFastEntry) {
				_scenarioIdFastEntry = new HashMap<Long, String>();
			}
			for ( Entry<String, Scenario> entry :
				_preProvidedScenarios.entrySet() ) {
				_scenarioIdFastEntry.put( new Long(
						entry.getValue().getId() ),
						entry.getKey() ); 
				
//				System.out.println(entry.getValue().getScenarioName() + " : " +
//						entry.getValue().getHashCode());
			}
		}
	}
	
}
