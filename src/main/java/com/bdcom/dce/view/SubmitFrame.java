package com.bdcom.dce.view;

import com.bdcom.dce.biz.pojo.BaseTestRecord;
import com.bdcom.dce.biz.pojo.Scenario;
import com.bdcom.dce.biz.scenario.ScenarioMgr;
import com.bdcom.dce.biz.scenario.ScenarioUtil;
import com.bdcom.dce.biz.script.ScriptExecutor;
import com.bdcom.dce.biz.script.ScriptMgr;
import com.bdcom.dce.nio.exception.GlobalException;
import com.bdcom.dce.view.message.MsgTable;
import com.bdcom.dce.view.util.GBC;
import com.bdcom.dce.view.util.Hook;
import com.bdcom.dce.view.util.MessageUtil;
import com.bdcom.dce.view.util.MsgDialogUtil;
import com.bdcom.dce.util.CommunicateStatus;
import com.bdcom.dce.datadispacher.http.HttpClientWrapper;
import com.bdcom.dce.nio.exception.ResponseException;
import com.bdcom.dce.nio.client.ClientProxy;
import com.bdcom.dce.sys.ApplicationConstants;
import com.bdcom.dce.sys.gui.GuiInterface;
import com.bdcom.dce.util.LocaleUtil;
import com.bdcom.dce.util.StringUtil;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.List;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-11-19  <br>
 * Auto-Generated by eclipse Juno <br>
 */

public class SubmitFrame extends JPanel implements 
				ViewTab, CommunicateStatus, ApplicationConstants {

	private static final long serialVersionUID = -8230627197553539810L;
	
	private static final DateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); 
	
	private static final String[] ALL_ATTR = ScenarioUtil.getAllAttrs();
	
	private ScriptExecutor scriptExecutor;
	
	private Hook scenarioListRefresher;
	
	private JPanel thisPanel = this;
	
	private String tabTitle;
	
	private Icon tabIcon;
	
	private String tabTip;
	
	private JLabel indexLabel;
	
	private JLabel crtSessionLabel;
	
	private JTextField indexTextField;
	
//	private JComboBox interperterCBox;
	
	private JCheckBox[] crtSessions;
	
	private JButton indexBt;
	
	private boolean auto;
	
	private boolean editable;
	
	private JCheckBox autoMode;
	
	private JCheckBox handMode;
	
	private JCheckBox sceEditable;
	
	private JCheckBox sceUneditable;
	
	private JCheckBox sceUsage;
	
	private JList scenarioList;
	
	private JButton submitBt;
	
	private JButton syncBt;
	
	private JLabel passLb;
			
	private JButton passBt;
			
	private JButton unpassBt;
	
	private JLabel fcLabel;
	
	private JCheckBox fcCBox;
	
	private boolean isFC = false;
	
	private boolean fcAdded = false;
	
	private JTextField showStatusField;

	private Map<String, JLabel> labelGroup;
	
	private Map<String, JTextField> textFieldGroup;
	
	private String[] uneditableTextFiels = ALL_ATTR;
			//{TEST_NUM, BEGIN_TIME, END_TIME};
	
	private Map<String, DocumentListener> docListenerGroup;
	
	private JPanel indexPanel;
	
	private JPanel modePanel;
	
	private JPanel attrDisplayPanel;
	
	private JPanel sceSelectPanel;
	
	private JPanel bottomPanel;
	
	private MsgTable msgTable;
	
	private BaseTestRecord currDataRec;
	
	private Scenario currentSce;

    private final GuiInterface app;

    private final ClientProxy clientProxy;

	public SubmitFrame(ClientProxy clientProxy, GuiInterface app) {
        this.clientProxy = clientProxy;
        this.app = app;
		generalInit();
	} 
	
	public void setMsgTable(MsgTable msgTable) {
		this.msgTable = msgTable;
	}

	public Hook getScenarioListRefreshHook() {
		if ( null == scenarioListRefresher ) {
			scenarioListRefresher = new Hook(this, "initScenarioList");
		}
		
		return scenarioListRefresher;
	}
	
	private void generalInit() {
		initCompos();
		initGenralLayout();
	}
	
	private void initGenralLayout() {
		this.setLayout( new GridBagLayout() );
		initIndexPanelLayout();
//		initModePanelLayout();
		initSessionPanelLayout();
		initAttrDisplayPanelLayout();
		initSceSelectPanelLayout();
		initBottomPanelLayout();
		
		JSeparator sepH0 = new JSeparator(SwingConstants.HORIZONTAL);
		JSeparator sepH1 = new JSeparator(SwingConstants.HORIZONTAL);
		JSeparator sepH2= new JSeparator(SwingConstants.HORIZONTAL);
		JSeparator sepV = new JSeparator(SwingConstants.VERTICAL);
		sepH0.setPreferredSize( new Dimension(600,2) );
		sepH1.setPreferredSize( new Dimension(600,2) );
		sepH2.setPreferredSize( new Dimension(600,2) );
		sepV.setPreferredSize( new Dimension(2,570) );
		sepH0.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
		sepH1.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
		sepH2.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
		sepV.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
		
		
		JPanel leftPane = new JPanel();
		leftPane.setLayout( new GridBagLayout() );
		leftPane.add( indexPanel, new GBC(0, 0).setInsets(2).setAnchor(GBC.NORTH) );
		leftPane.add( sepH0, new GBC(0, 1).setInsets(5) );
		leftPane.add( modePanel, new GBC(0, 2).setInsets(2) );
		leftPane.add( sepH1, new GBC(0, 3).setInsets(5) );
		leftPane.add( attrDisplayPanel, new GBC(0, 4).setInsets(2) );
		leftPane.add( sepH2, new GBC(0, 5).setInsets(5) );
		leftPane.add( bottomPanel, new GBC(0, 6).setInsets(5) );
		
		this.add(leftPane, new GBC(0, 0));
		this.add(sepV, new GBC(1, 0));
		this.add(sceSelectPanel, new GBC(2, 0));
	}
	
	private void initCompos() {
        initScriptExecutor();
		initLabelGroup();
		initTextFieldGroup();
//		initInterperterCBox();
		initCrtSessions();
		initIndexCompos();
		initScenarioList();
		//to call "initModeCheckBoxs()" must ensure TextFieldGroup has properly initialized
		initModeCheckBoxs(); 
		initSubmitBt();
		initSyncBt();
		initStatusCompos();
		initIndexPanel();
		initModePanel();
		initBottomPanel();
		initAttrDisplayPanel();
		initSceSelectPanel();
	}

    private void initScriptExecutor() {
        scriptExecutor = (ScriptExecutor)
                app.getAttribute(COMPONENT.SCRIPT_EXECUTOR);
    }
	
	private void initIndexPanel() {
		if ( null == indexPanel ) {
			TitledBorder tb = new TitledBorder(
					getLocalName(SERACH_AND_SUBMIT)
					);
			indexPanel = new JPanel();
			indexPanel.setLayout( new GridBagLayout() );
			indexPanel.setBorder(tb);
		}
	}
	
	private void initIndexPanelLayout() {
		indexPanel.setPreferredSize( new Dimension(590, 100) );
		indexTextField.setPreferredSize(new Dimension(160, 20));
//		indexTextField.setPreferredSize(new Dimension(180, 20));
		
		
		indexPanel.add(indexLabel, new GBC(0, 0)
						.setInsets(10, 10, 5, 10)
						.setAnchor(GBC.WEST)
						//.setFill(GBC.HORIZONTAL)
					  );
		indexPanel.add(indexTextField, new GBC(1, 0)
						.setInsets(5, 10, 5, 10)
						.setAnchor(GBC.WEST)
						//.setFill(GBC.HORIZONTAL)
					  );
		indexPanel.add(indexBt, new GBC(2, 0)
						.setInsets(5, 10, 5, 10)
						.setAnchor(GBC.WEST)
						//.setFill(GBC.HORIZONTAL)
					  );
		indexPanel.add(submitBt, new GBC(3, 0)
						.setInsets(5, 10, 5, 10)
						.setAnchor(GBC.WEST)
						//.setFill(GBC.HORIZONTAL)
					  );
		
	}
	
	public Hook getFcAddHook() {
		return new Hook(this, "addFcCompos");
	}
	
	public void addFcCompos() {
		if ( fcAdded ) {
			return;
		}
		if ( app.getBoolAttr( USER.SUPERVISOR ) ) {
			initFcCompos();
//			indexPanel.add(fcLabel, new GBC(0, 1)
//						.setInsets(10, 10, 5, 10)
//						.setAnchor(GBC.WEST)
////						.setFill(GBC.HORIZONTAL)
//					);
			indexPanel.add(fcCBox, new GBC(4, 0)
						.setInsets(5, 10, 5, 10)
						.setAnchor(GBC.WEST)
//						.setFill(GBC.HORIZONTAL)
					);
			
			
//			indexPanel.add(fcLabel, new GBC(0, 1)
//						.setInsets(10, 15, 5, 15)
//						.setAnchor(GBC.WEST)
////						.setFill(GBC.HORIZONTAL)
//					);
//			indexPanel.add(fcCBox, new GBC(1, 1)
//						.setInsets(5, 15, 5, 15)
//						.setAnchor(GBC.WEST)
////						.setFill(GBC.HORIZONTAL)
//					);
			
			fcAdded = true;
		}
	}
	
	private void initFcCompos() {
		isFC = false;
		if ( null == fcLabel ) {
			fcLabel = new JLabel(
					getLocalName(IS_FC)
					);
		}
		if ( null == fcCBox ) {
			fcCBox = new JCheckBox(
					getLocalName(IS_FC)
					);
			fcCBox.setSelected(false);
			fcCBox.addItemListener(
					new ItemListener() {
						@Override
						public void itemStateChanged(ItemEvent e) {
							if ( fcCBox.isSelected() ) {
								isFC = true;
							} else {
								isFC = false;
							}
                            app.addAttribute(
                                    TEST_ATTR.IS_FC, Boolean.valueOf(isFC));
						}
					}
				);
		}
	}
	
	private void initModePanel() {
		if ( null == modePanel ) {
			TitledBorder tb = new TitledBorder(
					getLocalName(MODE_SETTING)
					);
			modePanel = new JPanel();
			modePanel.setLayout(new GridBagLayout());
			modePanel.setBorder(tb);
		}
	}
	
	private void initBottomPanel() {
		if ( null == bottomPanel ) {
			TitledBorder tb = new TitledBorder(
                    LocaleUtil.getLocalName( "status setting")
					);
			bottomPanel = new JPanel();
			bottomPanel.setLayout(new GridBagLayout());
			bottomPanel.setPreferredSize( new Dimension(590, 80) );
			bottomPanel.setBorder(tb);
		}
	}
	
	private void initBottomPanelLayout() {
		
		bottomPanel.add(passLb, new GBC(0, 0).setAnchor(GBC.WEST)
								  	   .setInsets(4, 8, 4, 8)
				);
		bottomPanel.add(showStatusField, new GBC(1, 0).setAnchor(GBC.WEST)
								  	   .setInsets(4, 8, 4, 8)
				);
		bottomPanel.add(passBt, new GBC(2, 0).setAnchor(GBC.WEST)
								  	   .setInsets(4, 8, 4, 8)
				);
		bottomPanel.add(unpassBt, new GBC(3, 0).setAnchor(GBC.WEST)
								  	   .setInsets(4, 8, 4, 8)
				);
		
	}
	
	private void initSessionPanelLayout() {
		TitledBorder tb = new TitledBorder(
				getLocalName(CRT_SESSIONS)
				);
		modePanel.setBorder(tb);
		modePanel.setPreferredSize( new Dimension(590, 80) );
		
		int loc = 0;
		for (JCheckBox jcb : crtSessions) {
			modePanel.add(jcb, new GBC(loc % 4, loc / 4)
							.setInsets(10, 15, 5, 15)
							.setFill(GBC.HORIZONTAL)
						);
			loc++;
		}
	}
	
	private void initModePanelLayout() {
		modePanel.setPreferredSize( new Dimension(590, 120) );
		
		JLabel autoModeLabel = new JLabel(
				getLocalName(MODE_SELECTION)
				);
		JLabel sceEditModeLabel = new JLabel(
				getLocalName(SCE_EDIT_MODE)
				);
		modePanel.add(autoModeLabel, new GBC(0, 0)
						.setInsets(10, 20, 10, 20)
						.setAnchor(GBC.WEST)
					 );
		modePanel.add(autoMode, new GBC(1, 0)
						.setInsets(10, 20, 10, 20)
						.setAnchor(GBC.WEST)
					 );
		modePanel.add(handMode, new GBC(2, 0)
						.setInsets(10, 20, 10, 20)
						.setAnchor(GBC.WEST)
					 );
		modePanel.add(sceEditModeLabel, new GBC(0, 1)
						.setInsets(10, 20, 10, 20)
						.setAnchor(GBC.WEST)
					 );
		modePanel.add(sceEditable, new GBC(1, 1)
						.setInsets(10, 20, 10, 20)
						.setAnchor(GBC.WEST)
					 );
		modePanel.add(sceUneditable, new GBC(2, 1)
						.setInsets(10, 20, 10, 20)
						.setAnchor(GBC.WEST)
					 );
	}
	
	private void initAttrDisplayPanel() {
		if ( null == attrDisplayPanel ) {
			TitledBorder tb = new TitledBorder(
					getLocalName(TEST_DATA)
					);
			attrDisplayPanel = new JPanel();
			attrDisplayPanel.setLayout(new GridBagLayout());
			attrDisplayPanel.setBorder(tb);
		}
	}
	
	private void initStatusCompos() {
		passLb = new JLabel(
				getLocalName(_STATUS_SETTING)
				);
		passBt = new JButton(
				getLocalName(_PASS)
				);
		unpassBt = new JButton(
				getLocalName(_UNPASS)
				);
		final Font font = new Font(passBt.getFont().getName(), Font.BOLD, 11);
		passBt.setFont(font);
		unpassBt.setFont(font);
		
		final JTextField statusField = textFieldGroup.get(_STATUS);
		showStatusField = new JTextField();
		final JTextField showField = showStatusField; 
		showField.setFont(font);
		showField.setPreferredSize(new Dimension(90,30)); 
		showField.setEditable(false);
		passBt.setBackground(Color.BLUE);
		passBt.setForeground(Color.BLUE);
		unpassBt.setBackground(Color.RED) ;
		unpassBt.setForeground(Color.RED) ;
		passBt.setPreferredSize(new Dimension(70, 30));
		unpassBt.setPreferredSize(new Dimension(70, 30));
		
		passBt.addActionListener(
				new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent arg0) {
//						attrDisplayPanel.setBackground(Color.GREEN);
						statusField.setText(_OK);
						showField.setForeground(Color.GREEN);
						showField.setText(
								getLocalName(_OK)
								);
					}
				}
				); 
		unpassBt.addActionListener(
				new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent arg0) {
//						attrDisplayPanel.setBackground(Color.RED);
						statusField.setText(_NOT_OK);
						showField.setForeground(Color.RED);
						showField.setText(
								getLocalName(_NOT_OK)
								);
					}
				}
				);
		passBt.setEnabled(false);
		unpassBt.setEnabled(false);
	}
	
	private void initAttrDisplayPanelLayout() {
		attrDisplayPanel.setPreferredSize( new Dimension(590, 300) );
		int location = 0;
		for (String attr : ALL_ATTR) {
			if (attr.equals("status")) {
				continue;
			}
			JLabel label = labelGroup.get(attr);
			JTextField field = textFieldGroup.get(attr);
			if (location % 2 == 0) {
				attrDisplayPanel.add(label, 
						new GBC(0 , location).setAnchor(GBC.WEST)
											  .setInsets(4, 8, 4, 8)
											  .setFill(GBC.HORIZONTAL)
										 );
				attrDisplayPanel.add(field, 
						new GBC(1 , location).setAnchor(GBC.WEST)
											  .setInsets(4, 8, 4, 8)
										 );
			} else {
				attrDisplayPanel.add(label, 
						new GBC(2, location -1).setAnchor(GBC.WEST)
											   .setInsets(4, 8, 4, 8)
											   .setFill(GBC.HORIZONTAL)
										 );
				attrDisplayPanel.add(field, 
						new GBC(3, location -1).setAnchor(GBC.WEST)
										  	   .setInsets(4, 8, 4, 8)
										 );
			}
			location++;
		}

	}
	
	private void initSceSelectPanel() {
		if ( null == sceSelectPanel ) {
//			TitledBorder tb = new TitledBorder(
//					getLocalName(SCE_SELECT_LIST)
//					);
			sceSelectPanel = new JPanel();
			sceSelectPanel.setPreferredSize(new Dimension(170, 480));
//			sceSelectPanel.setLayout(new GridBagLayout()); 
//			sceSelectPanel.setBorder(tb);
		}
	}
	
	private void initSceSelectPanelLayout() {
//		JScrollPane jscroll = new JScrollPane(scenarioList);
//		jscroll.setPreferredSize(new Dimension(170, 480));
//		sceSelectPanel.add(sceUsage, new GBC(0, 0)
//								.setInsets(10, 20, 4, 20)
//								.setFill(GBC.HORIZONTAL)
//						  );
//		sceSelectPanel.add(syncBt, new GBC(0, 1)
//								.setInsets(4, 20, 4, 20)
//								.setFill(GBC.HORIZONTAL)
//						  );
//		sceSelectPanel.add(jscroll, new GBC(0, 2)
//								.setInsets(4, 20, 10, 20)
//								.setFill(GBC.HORIZONTAL)
//						  );
	}
	
	private void initIndexCompos() {
		if ( null == indexLabel ) {
			indexLabel = new JLabel(
					getLocalName(SERIAL_NUM)
					);
		}
		if ( null == crtSessionLabel ) {
			crtSessionLabel = new JLabel(
					getLocalName(CRT_SESSIONS)
					);
		}
		if ( null == indexTextField ) {
			indexTextField = new JTextField(); 
		}
		if ( null == indexBt ) {
			indexBt = new JButton(
					getLocalName(EXE_BT)
					);
			indexBt.setPreferredSize( new Dimension(90, 25) );
			indexBt.addActionListener(
						new ActionListener() {

							public void actionPerformed(ActionEvent e) {
								String serialNum = indexTextField.getText();
								if ( !StringUtil.isNotBlank(serialNum) ) {
									MsgDialogUtil.showErrorDialog(
											getLocalName(NULL_SERIAL)
											);
									return;
								}
								
								if ( !isSelectedAnyCrt() ) {
									MsgDialogUtil.showErrorDialog(
											getLocalName(NULL_CRT)
											);
									return;
								}
								
								indexBt.setText(
										getLocalName(EXECUTING)
										);
								indexBt.revalidate();
								indexBt.setEnabled(false);
								indexTextField.setEnabled(false);
								autoMode.setEnabled(false);
								handMode.setEnabled(false);
								setUsableOfAllCrt(false);
								
								new Thread(
										new Runnable() {

											@Override
											public void run() {
												
								String serial = indexTextField.getText();
								int exeCode = scriptExecutor.execute(
										getSelectedCrtSessions(),
										serial);
								if ( exeCode > 0 ) {
									while ( scriptExecutor.isAnyRunning() ) {
										int status = scriptExecutor.getSendResult();
										
										if ( null != msgTable ) {
											msgTable.addMsg(status);
										}
										
										if ( status == _SUCCESS_INVALID ) {
											scriptExecutor.killAllRunningScript();
											MsgDialogUtil.showErrorDialog(
													MessageUtil.getMessageByStatusCode(status)
													);
										}
										
										if ( status - 1 == _SERVER_CONNEC_FAIL ) {
											scriptExecutor.killAllRunningScript();
											MsgDialogUtil.showErrorDialog(
                                                    MessageUtil.getMessageByStatusCode(status - 1)
                                            );
                                            app.logout();
										}
									}
									indexBt.setEnabled(true);
									indexTextField.setEnabled(true);
									setUsableOfAllCrt(true);
								} else {
									MsgDialogUtil.showErrorDialog(
											MessageUtil.getMessageByStatusCode(exeCode)
											);
									//fire event and make all related status change!
                                    ScenarioMgr scenarioMgr = (ScenarioMgr)
                                            app.getAttribute(COMPONENT.SCENARIO_MGR);
									Scenario sce = scenarioMgr.getScenarioBySerial(serial);
									if ( null == sce ) {
										String msg = getLocalName(NO_MATCHING_SCE);
										MsgDialogUtil.showErrorDialog( msg );
                                        MsgTable msgTable = (MsgTable)
                                                app.getAttribute(COMPONENT.MSG_TABLE);
										msgTable.addErrMsg(serial + " " + msg);
										
										int ok = JOptionPane.showConfirmDialog(
												thisPanel,
												LocaleUtil.getLocalName(NO_MATCHING_SCE_IF_SEND_MAIL),
												LocaleUtil.getLocalName(_ERROR),
												JOptionPane.YES_NO_OPTION);
										
										if ( 0 == ok) {
											final String serialNum = serial;
											new Thread(new Runnable(){
												public void run() {
													if ( !HttpClientWrapper.getInstance()
															.noSceMatchWarning(serialNum) ) {
														MsgDialogUtil.showMsgDialogLocalised(
																	SENDING_WARN_FAIL);
													}
												}
											}).start();
										}
										
										indexBt.setEnabled(true);
										indexTextField.setEnabled(true);
										setUsableOfAllCrt(true);
									} else {
										currentSce = sce;
										handMode.setSelected(true); 
										updateTextFieldGroupByScenarioNoList();
										changeStatusOfTextFieldGroup();
									}
								}
								
								indexBt.setText(
										getLocalName(EXE_BT)
										);
								indexBt.revalidate();
								autoMode.setEnabled(true);
								handMode.setEnabled(true);
											}
										}).start();
							}
						}
					); 
		}
	}
	
	//Dumb code!!!!
	private void initSyncBt() {
		if ( null == syncBt ) {
			syncBt = new JButton(
					getLocalName(SYNC_BT)
					);
			syncBt.setPreferredSize(new Dimension(80, 25));
			syncBt.addActionListener(
					new ActionListener(){
							private Runnable syncThread;
							@Override
							public void actionPerformed(ActionEvent e) {
								if ( null == syncThread ) {
								syncThread = new Runnable() {
										@Override
										public void run() {
											syncBt.setEnabled(false);
                                            ScenarioMgr scenarioMgr = (ScenarioMgr)
                                                    app.getAttribute(COMPONENT.SCENARIO_MGR);
											Set<String> nameSet = scenarioMgr.getScenarioNameList();
											Scenario[] sces =
													new Scenario[nameSet.size()];
											if ( sces.length > 0 ) {
												int i = 0;
												for (String name : nameSet) {
													sces[i] = scenarioMgr.getScenarioByName(name);
													i++;
												}
											}
											int status = 0;
											String msg = MessageUtil.getMessageByStatusCode(status);
											if (status > 0) {
												MsgDialogUtil.showMsgDialog(msg);
											} else {
												MsgDialogUtil.showErrorDialog(msg);
											}
											syncBt.setEnabled(true);
										}
									};
								}
								
								new Thread(syncThread).start();
							}
						}
					);
			
			syncBt.setEnabled(false);
		}
	}
	
	private void initSubmitBt() {
		if ( null == submitBt ) {
			submitBt = new JButton(
					getLocalName(SUBMIT_BT)
					);
			submitBt.setPreferredSize(new Dimension(90, 25));
			submitBt.addActionListener(
						new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								submitBt.setText(
										getLocalName(SENDING)
										);
								submitBt.revalidate();
								submitBt.setEnabled(false);
								autoMode.setEnabled(false);
								handMode.setEnabled(false);
								new Thread(
										new Runnable() {
											@Override
											public void run() {
												doSubmit();
												submitBt.setText(
														getLocalName(SUBMIT_BT)
														);
												submitBt.revalidate();
												autoMode.setEnabled(true);
												handMode.setEnabled(true);
												
												if ( handMode.isSelected() ) {
													submitBt.setEnabled(true);
												}
											}
										}
										).start();
							}
						}
					);
			submitBt.setEnabled(false);
		}
	}
	
	private void doSubmit() {
		
		if ( null == currDataRec ) {
			MsgDialogUtil.showErrorDialogLocalised(EMPTY_RECORD);
			return;
		}
		if (!auto) {
			mergeTextFieldValueToFinalResult();
		}
		for ( String attrName : ALL_ATTR) {
			String attrValue = currDataRec.getAttrByFieldName(attrName);
			
			if  ( BEGIN_TIME.equals(attrName) && !StringUtil.isNotBlank(attrValue) ) {
				String beginTime = DATE_FORMAT.format( new Date());
				currDataRec.setBeginTime( beginTime );
				textFieldGroup.get(attrName).setText(beginTime);
				continue;
			}
			
			if ( END_TIME.equals(attrName) && !StringUtil.isNotBlank(attrValue) ) {
				String endTime = DATE_FORMAT.format( new Date());
				currDataRec.setEndTime(DATE_FORMAT.format( new Date()));
				textFieldGroup.get(attrName).setText(endTime);
				continue;
			}
			
			if ( null == attrValue || !StringUtil.isNotBlank(attrValue) ) {
				String msg = getLocalName( attrName ) + getLocalName( IS_BLANK );
				if (_STATUS.equalsIgnoreCase(attrName)) {
					MsgDialogUtil.showErrorDialog( msg );
					return;
				}
			}
		}
		currDataRec.setFC(isFC);
		String serialNum = indexTextField.getText();
		currDataRec.setSerialNumber(serialNum);
		currDataRec.setRandomID(
				StringUtil.getRandomString(8)
				);
		int status = submit(currDataRec);
		String msg = getMessageByStatusCode(status);

		if ( status < 0 ) {
			MsgDialogUtil.showErrorDialog( msg );
		} else if ( status > 0 ) {
			MsgDialogUtil.showMsgDialog(msg);
		}
		autoMode.setSelected(true);
		currDataRec = null;
		
		updateAllCompoStatus();

        MsgTable msgTable = (MsgTable)
                app.getAttribute(COMPONENT.MSG_TABLE);
		
		msgTable.addMsg(status);
	}
	
	private void mergeTextFieldValueToFinalResult() {
		if ( null == textFieldGroup ) {
			return;
		}
		
		for ( String attr : ALL_ATTR) {
			JTextField jtf = textFieldGroup.get(attr);
			jtf.setText( //doc event listener will update field "currDataRec"
					jtf.getText()
					);
		}
	}
	
//	private void initInterperterCBox() {
//		Set<String> ips = getInterpreterList();
//		DefaultComboBoxModel model = null;
//		
//		if ( null == interperterCBox) {
//			model = new DefaultComboBoxModel();
//		} else {
//			model = (DefaultComboBoxModel) interperterCBox.getModel();
//		}
//		model.removeAllElements();
//		if ( null != ips && !ips.isEmpty() ) {
//			for ( String ip : ips) {
//				model.addElement(ip);
//			}
//		}
//		if ( null == interperterCBox ) {
//			interperterCBox = new JComboBox(model);
//			interperterCBox.setPreferredSize(new Dimension(140, 20));
//		} else {
//			interperterCBox.setModel(model);
//			interperterCBox.revalidate();
//		}
//	}
	
	private void initCrtSessions() {
		Set<String> crtSessionNames = getCrtSessions();
		if ( null == crtSessions ) {
			if ( null == crtSessionNames ) {
				return;
			}
			crtSessions = new JCheckBox[crtSessionNames.size()];
			int index = 0;
			for ( String crtSesName : crtSessionNames ) {
				crtSessions[index] = new JCheckBox(crtSesName);
				crtSessions[index].setName(crtSesName);
				index ++;
			}
		}
	}
	
	private boolean isSelectedAnyCrt() {
		if ( null == crtSessions || 0 == crtSessions.length ) {
			return false;
		}
		boolean isSelectd = false;
		for (JCheckBox jcb : crtSessions) {
			isSelectd = jcb.isSelected() || isSelectd;
			if ( isSelectd ) {
				break;
			}
		}
		return isSelectd;
	}
	
	private void setUsableOfAllCrt(boolean bool) {
		if ( null == crtSessions || 0 == crtSessions.length ) {
			return;
		}
		
		for (JCheckBox jcb : crtSessions) {
			jcb.setEnabled(bool);
		}
	}
	
	private String[] getSelectedCrtSessions() {
		if ( null == crtSessions || crtSessions.length == 0) {
			return null;
		}
		
		List<String> css  = new ArrayList<String>();
		for ( JCheckBox cs : crtSessions ) {
			if ( cs.isSelected() ) {
				css.add( cs.getName() );
			}
		}
		
		String[] cn = new String[css.size()];
		css.toArray(cn);
		return cn;
	}
	
	private void initModeCheckBoxs() {
		if ( null == sceUsage ) {
			sceUsage = new JCheckBox(
					getLocalName(IF_USE_SCENARIO)
					);
			sceUsage.setSelected(false);
			sceUsage.addItemListener(
						new ItemListener() {

							public void itemStateChanged(ItemEvent e) {
								if ( sceUsage.isSelected() ) {
									syncBt.setEnabled(true);
									changeScenarioUsage(true);
									updateTextFieldGroupByScenario();
								} else {
									syncBt.setEnabled(false);
									changeScenarioUsage(false);
									refreshTextFieldGroup(currDataRec);
									
									//empty scenario to enable all textField
									disableTextFieldGroupbyScenario(
											new Scenario());
								}
							}
							
						}
					);
			sceUsage.setEnabled(false);
		}
		
		if ( autoMode == null ) {
			autoMode = new JCheckBox(
					getLocalName(AUTO_MODE)
					);
			auto = true;
			autoMode.setSelected(true);
			//empty scenario to disable
			disableTextFieldGroupbyScenario(
					new Scenario()
					);
		}
		if ( handMode == null ) {
			handMode = new JCheckBox(
					getLocalName(HAND_MODE)
					);
		}
		ItemListener amil = getItemListener(autoMode, handMode);
		autoMode.addItemListener(amil);
		handMode.addItemListener(amil);
		
		
		if ( null == sceEditable ) {
			sceEditable = new JCheckBox(
					getLocalName(SCE_EDITABLE)
					);
			sceEditable.setEnabled(false); 
		}
		if ( null == sceUneditable ) {
			sceUneditable = new JCheckBox(
					getLocalName(SCE_UNEDITABLE)
					);
			sceUneditable.setSelected(true); 
			sceUneditable.setEnabled(false); 
		}
		ItemListener ceil = getItemListener(sceEditable, sceUneditable);
		sceEditable.addItemListener(ceil);
		sceUneditable.addItemListener(ceil);
		
	}
	
	private void changeScenarioUsage(boolean usage) {
		if ( usage ) {
			sceEditable.setEnabled(true);
			sceUneditable.setEnabled(true);
			scenarioList.setEnabled(true);
		} else {
			sceEditable.setEnabled(false);
			sceUneditable.setEnabled(false);
			scenarioList.setEnabled(false);
			//empty scenario to ignore scenario
			currentSce = new Scenario();
		}
	}
	
	private ItemListener getItemListener(final JCheckBox boxOn,
			final JCheckBox boxOff) {
		return new ItemListener() {

			public void itemStateChanged(ItemEvent e) {
				Object source = e.getItemSelectable();
				JCheckBox cb = (JCheckBox) source;
				if ( !cb.isSelected() ) {
					if ( cb == boxOn ) {
						boxOff.setSelected(true);
						boxOn.setSelected(false);
					} else if ( cb == boxOff ) {
						boxOff.setSelected(false);
						boxOn.setSelected(true);
					}
				} else {
					if ( cb == boxOn ) {
						boxOff.setSelected(false);
						boxOn.setSelected(true);
					} else if ( cb == boxOff ) {
						boxOff.setSelected(true);
						boxOn.setSelected(false);
					}
				}
				
				updateAllCompoStatus();
			}
			
		};
	}
	
	private void updateAllCompoStatus() {
		if ( autoMode.isSelected() 
				&& !handMode.isSelected()) {
			auto = true;
			sceEditable.setEnabled(false);
			sceUneditable.setEnabled(false);
			indexTextField.setEnabled(true);
//			interperterCBox.setEnabled(true);
			indexBt.setEnabled(true);
			submitBt.setEnabled(false);
			passBt.setEnabled(false);
			unpassBt.setEnabled(false);
			// fire event to disable scenario select list
			sceUsage.setSelected(false); 
			sceUsage.setEnabled(false);
			clearTextFieldGroupContent();
			disableTextFieldGroupbyScenario(
					new Scenario()
					);
			if ( null == currDataRec ) {
                String user = app.getStringAttr( USER.USER_NUM );
				currDataRec = BaseTestRecord.newRecord( user );
				refreshTextFieldGroup(currDataRec);	
			}
			setUsableOfAllCrt(true);
		} else {
			auto = false;
			indexTextField.setEnabled(false);
//			interperterCBox.setEnabled(false);
			indexBt.setEnabled(false);
			submitBt.setEnabled(true);
			passBt.setEnabled(true);
			unpassBt.setEnabled(true);
			sceUsage.setEnabled(true);
			if (sceUsage.isSelected() ) {
				sceEditable.setEnabled(true);
				sceUneditable.setEnabled(true);
			}
			if ( sceEditable.isSelected() 
					&& !sceUneditable.isSelected() ) {
				editable = true;
			} else {
				editable = false;
			}
			
			//refresh the editable status of the textfields that 
			//stands for attribute in current scenario
			if ( null != currentSce ) {
				disableTextFieldGroupbyScenario(currentSce);
			} else {
				disableTextFieldGroupbyScenario(
						new Scenario()
						);
			}
			setUsableOfAllCrt(false);
		}
	}
	
	private void initLabelGroup() {
		if ( null == labelGroup ) {
			labelGroup = new HashMap<String, JLabel>(15);
		}
		
		for ( String attr : ALL_ATTR) {
			JLabel label = new JLabel(
					getLocalName(attr)
					);
			label.setName(attr);
			labelGroup.put(attr, label); 
		}
	}
	
	private void initTextFieldGroup() {
		if ( null == textFieldGroup ) {
			textFieldGroup = new HashMap<String, JTextField>(15);
		}
		
		for ( String attr : ALL_ATTR) {
			JTextField jtf = null;
			
			if  ( BEGIN_TIME.equals(attr) || 
				  END_TIME.equals(attr)	) {
				jtf = new JFormattedTextField( DATE_FORMAT );
				jtf.setEditable(false);
			} else {
				jtf = new JTextField();
			}
			
			jtf.setName(attr);
			jtf.setPreferredSize(new Dimension(180,20));
			jtf.getDocument().addDocumentListener(
						getDocumentListener(jtf)
					);

			if (TEST_NUM.equals(attr)) {
				jtf.setEditable(false);
				jtf.setForeground(Color.GREEN);
			}
			
			textFieldGroup.put(attr, jtf); 
		}
		
		if ( null == currDataRec ) {
            String user = app.getStringAttr( USER.USER_NUM );
			currDataRec = BaseTestRecord.newRecord( user );
			refreshTextFieldGroup(currDataRec);	
		}
	}
	
	private void refreshTextFieldGroup(BaseTestRecord dataRec) {
		if ( null == textFieldGroup || 
				null == dataRec) {
			return;
		}
		
		for ( String attr : ALL_ATTR) {
			String text = dataRec.getAttrByFieldName(attr);
			JTextField jtf = textFieldGroup.get(attr);
			changeTextFieldWithoutListener(jtf, text);
		}
		
	}
	
	private void changeStatusOfTextFieldGroup() {
		Set<String> fixedAttrs = null;
		if ( null != currentSce ) {
			fixedAttrs = currentSce.getAttrNames();
		}
		
		for ( String attr : ALL_ATTR) {
			JTextField jtf = textFieldGroup.get(attr);
			if ( null != fixedAttrs && 
					fixedAttrs.contains(attr) ) {
				jtf.setEditable(!auto && editable);
			} else {
				jtf.setEditable(!auto);
			}
			isEditableField(jtf);
		}
		
	}
	private void changeTextFieldWithoutListener(final JTextField jtf, String newValue) {
		DocumentListener docListener = getDocumentListener(jtf);
		
		//unbound docListener
		jtf.getDocument().removeDocumentListener(docListener);
		
		jtf.setText(newValue);
		
		//rebound docListener
		jtf.getDocument().addDocumentListener(docListener);
	}
		
	
	private void clearTextFieldGroupContent() {
		for ( String attr : ALL_ATTR) {
			JTextField jtf = textFieldGroup.get(attr);
			changeTextFieldWithoutListener(jtf, "");
		}
		showStatusField.setText("");
	}

	private DocumentListener getDocumentListener(final JTextField jtf) {
		final String attrName = jtf.getName();
		if ( null == docListenerGroup ) {
			docListenerGroup = new HashMap<String, DocumentListener>();
		}
		DocumentListener docLsr = docListenerGroup.get(attrName);
		if ( null == docLsr ) {
			docLsr = new DocumentListener() {
				public void insertUpdate(DocumentEvent e) {
					handler(e);
				}
				public void removeUpdate(DocumentEvent e) {
					handler(e);
				}
				public void changedUpdate(DocumentEvent e) {
					handler(e);
				}
				private void handler(DocumentEvent e) {
					String text = jtf.getText();
					if ( null != text && StringUtil.isNotBlank(text) ) {
						if ( null == currDataRec) {
                            String user = app.getStringAttr( USER.USER_NUM );
							currDataRec = BaseTestRecord.newRecord( user );
						}
						currDataRec.setAttrByFieldName(attrName, text);
					}
				}
			};
			docListenerGroup.put(attrName, docLsr);
		}
		return docLsr;
	}
	
	private void initScenarioList() { // also with the function of refresh
		Set<String> sceList = getScenarioList();
		if ( null == scenarioList ) {
			DefaultListModel model = new DefaultListModel();
			
			if ( null != sceList ) {
				int index = 0;
				for ( String sceName : sceList ) {
					model.add(index, sceName);
					index ++;
				}
			}
			scenarioList = new JList(model);
			scenarioList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
//			scenarioList.setPreferredSize(new Dimension(160,480));
			scenarioList.addListSelectionListener(
						new ListSelectionListener() {

							public void valueChanged(ListSelectionEvent e) {
								updateTextFieldGroupByScenario();
							}
							
						}
					);
			scenarioList.setEnabled(false);
		} else {
			DefaultListModel model = (DefaultListModel) scenarioList.getModel();
			Enumeration<?> enume =model.elements();
			while(enume.hasMoreElements()) {
				Object elem = enume.nextElement();
				if (!sceList.contains(elem)) {
					model.removeElement(elem);
				}
			}
			for (String sceName : sceList) {
				if (!model.contains(sceName)) {
					model.add(model.size(), sceName);
				}
			}
			scenarioList.revalidate();
		}
	}
	
	private void updateTextFieldGroupByScenarioNoList() {
		BaseTestRecord mergedRecord = null;
		if ( null == currDataRec ) {
            String user = app.getStringAttr( USER.USER_NUM );
			currDataRec = BaseTestRecord.newRecord( user );
			mergedRecord = currDataRec;
		} else {
			mergedRecord = mergeDataRecWithScenario(currDataRec,
					currentSce);
		}
		clearTextFieldGroupContent();
		refreshTextFieldGroup(mergedRecord);
	}
	
	private void updateTextFieldGroupByScenario() {
		if ( scenarioList.getSelectedIndex() >= 0 ) {
			BaseTestRecord mergedRecord = null;
			String sceName = (String) scenarioList
					.getSelectedValue();
			Scenario savedSce =
					getScenarioByName(sceName);
			currentSce = savedSce;
			if ( null == currDataRec ) {
                String user = app.getStringAttr( USER.USER_NUM );
				currDataRec = BaseTestRecord.newRecord( user );
				mergedRecord = currDataRec;
			} else {
				mergedRecord = mergeDataRecWithScenario(currDataRec,
						currentSce);
			}
			clearTextFieldGroupContent();
			refreshTextFieldGroup(mergedRecord);
		}
	}

	private BaseTestRecord mergeDataRecWithScenario(BaseTestRecord dataRec,
			Scenario scenario) {
		BaseTestRecord newDataRec = ScenarioUtil
				.mergePreProvidedScenario(dataRec, scenario);
		if ( !auto ) {
			disableTextFieldGroupbyScenario(scenario);
		}
		return newDataRec;
	}
	
	//disable textfield's editable
	//a empty scenario can enable the editable status of all textfields
	private void disableTextFieldGroupbyScenario(Scenario scenario) {
		Set<String> attrs = scenario.getAttrNames();
		for ( String attr : ALL_ATTR) {
			JTextField jtf = textFieldGroup.get(attr);
			
			if ( attrs.contains(attr) ) {
				if ( !editable ) {
					jtf.setEditable(false);
				} else {
					jtf.setEditable(true);
				}
				jtf.setForeground(Color.RED);
			} else {
				if ( !auto ) {
					jtf.setEditable(true);
				} else {
					jtf.setEditable(false);
				}
				jtf.setForeground(Color.BLACK);
			}
			
			isEditableField(jtf);
		}
	}
	
	private void isEditableField(JTextField jtf) {
		String jtfName = jtf.getName();
		
		if (TEST_NUM.equals(jtfName)) {
            String userNum = app.getStringAttr( USER.USER_NUM );
			jtf.setEditable(false);
			jtf.setText( userNum );
			jtf.setForeground(Color.GREEN);
		}
		
		for ( String name : uneditableTextFiels ) {
			if ( name.equals( jtfName )) {
				jtf.setEditable(false);
			}
		}
		
	}

	private Scenario getScenarioByName(String sceName) {
        ScenarioMgr scenarioMgr = (ScenarioMgr)
                app.getAttribute(COMPONENT.SCENARIO_MGR);

        return scenarioMgr.getScenarioByName(sceName);
	}
	
	private Set<String> getScenarioList() {
        ScenarioMgr scenarioMgr = (ScenarioMgr)
                app.getAttribute( COMPONENT.SCENARIO_MGR );
        return scenarioMgr.getScenarioNameList();
	}

	private Set<String> getCrtSessions() {
        ScriptMgr scriptMgr =
                (ScriptMgr) app.getAttribute(COMPONENT.SCRIPT_MGR);
		return scriptMgr.getCrtSessions();
	}
	
	private String getLocalName(String name) {
		return LocaleUtil.getLocalName(name);
	}
	
	private String getMessageByStatusCode(int status) {
		return MessageUtil.getMessageByStatusCode(status);
	}
	
	private int submit(BaseTestRecord dataRec) {
        int status = -1;
        try {
            status = clientProxy.sendBaseTestRecord( dataRec );
        } catch (IOException e) {
            //TODO warning!
            e.printStackTrace();
        } catch (ResponseException e) {
            //TODO warning!
            e.printStackTrace();
        } catch (GlobalException e) {
            MsgDialogUtil.reportGlobalException( e );
            app.logout();
        }

        return status;
	}

	public void setTabTitle(String tabTitle) {
		this.tabTitle = tabTitle;
	}

	public String getTabTitle() {
		return tabTitle;
	}

	public void setTabIcon(Icon tabIcon) {
		this.tabIcon = tabIcon;
	}

	public Icon getTabIcon() {
		return tabIcon;
	}

	public Component getTabComponent() {
		return thisPanel;
	}

	public void setTabTip(String tabTip) {
		this.tabTip = tabTip;
	}

	public String getTabTip() {
		return tabTip;
	}
	
}
