package com.bdcom.dce.view;

import com.bdcom.dce.view.common.MsgTable;
import com.bdcom.dce.view.util.Hook;
import com.bdcom.dce.view.util.ViewUtil;
import com.bdcom.dce.datadispacher.http.HttpClientWrapper;
import com.bdcom.dce.sys.ApplicationConstants;
import com.bdcom.dce.sys.gui.GuiInterface;
import com.bdcom.dce.util.LocaleUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-11-21 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public class MainFrame extends TopLevelFrame implements ApplicationConstants {
	
	private static final long serialVersionUID = -2215630151199687633L;
	
	private List<Hook> refreshers;
	
	private JFrame thisFrame = this;
	
	private List<ViewTab> tabs;
	
	private List<ViewTab> rtabs;
	
	private JTabbedPane mainPanel;
	
	private boolean inited = false;
	
	private Image image;
	
	private MsgTable msgTable;
	
	private DebugRecordTable drTable;
	
	private JMenuBar mb;
	
	private JMenu menu;
	
	private JCheckBoxMenuItem cbmi;
	
	private JCheckBoxMenuItem debugRec;
	
	private JMenuItem logoutMi;

    private final GuiInterface app;
	
	public MainFrame(GuiInterface app) {
        super(app);
        this.app = app;
		preInit();
	}
	
	public void setImage(Image image) {
		this.image = image;
	}
	
	public MsgTable getMsgTable() {
		return msgTable;
	}

	private void preInit() {
        msgTable = (MsgTable) app.getAttribute( COMPONENT.MSG_TABLE );

		mb = new JMenuBar();
		menu = new JMenu(
				LocaleUtil.getLocalName(_OTHER)
				);
		cbmi = new JCheckBoxMenuItem(
				LocaleUtil.getLocalName(MSG_LIST)
				);
		logoutMi = new JMenuItem(
				LocaleUtil.getLocalName(_LOG_OUT)
				);
		cbmi.addItemListener(
				new ItemListener() {
					@Override
					public void itemStateChanged(ItemEvent e) {
                        AbstractFrame msgTable =
                                app.getFrame( COMPONENT.MSG_TABLE );
						if ( cbmi.isSelected() ) {
							msgTable.display();
						} else {
							msgTable.hideFrame();
						}
					}
				}
			);
		logoutMi.addActionListener(
				new ActionListener() {
					@Override
					public void actionPerformed(ActionEvent e) {
                        app.logout();
					}
				}
			);
		msgTable.addWindowListener(
				new WindowAdapter() {
					public void windowClosing(WindowEvent e) {
						cbmi.setSelected(false);
					}
				}
			);
		menu.add(cbmi);
		menu.add(logoutMi);
		mb.add(menu);
		this.setJMenuBar(mb);
	}
	
	@Override  
    protected void processWindowEvent(WindowEvent e) {  
        if (e.getID() == WindowEvent.WINDOW_CLOSING)  {
			int ok = JOptionPane.showConfirmDialog(
					thisFrame,
					LocaleUtil.getLocalName(_CONFIRM_EXIT),
					LocaleUtil.getLocalName(_MESSAGE),
					JOptionPane.YES_NO_OPTION);
			if ( ok == 0) {
				thisFrame.setVisible( true );
				if ( app.getBoolAttr( USER.SUPERVISOR ) ) {
					HttpClientWrapper.getInstance()
						.clearDebugRecordsViaHttp();
				}
                app.terminal();
			} else {
				return;
			}
        }
        super.processWindowEvent(e);
    }  
	
	public void init() {
		if (inited) {
			return;
		}
		
		this.setIconImage(image);
		msgTable.setImage(image);
		this.setTitle(
				LocaleUtil.getLocalName(SYS_NAME)
				);
		
		if ( null != tabs ) {
			for (ViewTab viewTab : tabs ) {
				mainPanel.addTab(
						viewTab.getTabTitle(),
						viewTab.getTabIcon(),
						viewTab.getTabComponent(),
						viewTab.getTabTip()
						);
			}
		}
		
		if ( null != rtabs && app.getBoolAttr( USER.SUPERVISOR ) ) {
			for (ViewTab viewTab : rtabs ) {
				mainPanel.addTab(
						viewTab.getTabTitle(),
						viewTab.getTabIcon(),
						viewTab.getTabComponent(),
						viewTab.getTabTip()
						);
			}
		}
		
		if ( app.getBoolAttr( USER.SUPERVISOR )) {
			if ( null == drTable ) {
				drTable = new DebugRecordTable(app);
				drTable.setImage(image);
				drTable.addWindowListener(
						new WindowAdapter() {
							public void windowClosing(WindowEvent e) {
								debugRec.setSelected(false);
							}
						}
					);
			}
			if ( null == debugRec ) {
				debugRec = new JCheckBoxMenuItem(
					LocaleUtil.getLocalName(RECENT_ADD2DB)
				);
				debugRec.addItemListener(
					new ItemListener() {
						@Override
						public void itemStateChanged(ItemEvent e) {
							if ( debugRec.isSelected() ) {
								drTable.display();
							} else {
								drTable.hideFrame();
							}
						}
					}
				);
			}
			
			menu.removeAll();
			menu.add(cbmi);
			menu.add(debugRec);
			menu.add(logoutMi);
		}

		Container con = this.getContentPane();
		con.add(mainPanel, BorderLayout.CENTER);
		this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		this.setResizable(false);
		this.pack();
		ViewUtil.centerWindow(this);
		
//		msgTable.startListener();
		inited = true;
	}
	
	public void display0() {
		
		if ( (null == tabs || tabs.size() == 0) &&
				(null == rtabs || rtabs.size() == 0) ) {
			return;
		}
		
		if ( !inited ) {
			init();
		}
		this.setVisible(true);
	}
	
	public void hideFrame() {
		cbmi.setSelected(false);
		msgTable.hideFrame();
		thisFrame.setVisible(false);
	}
	
	public Component getSelfFrame() {
		return thisFrame;
	}
	
	public void addViewTab(ViewTab viewTab) {
		if ( null == mainPanel ) {
		    mainPanel = new JTabbedPane();
		}
		if ( null == tabs ) {
			tabs = new ArrayList<ViewTab>();
		}
		tabs.add(viewTab);
	}
	
	public void addRootViewTab(ViewTab viewTab) {
		if ( null == mainPanel ) {
		    mainPanel = new JTabbedPane();
		}
		if ( null == rtabs ) {
			rtabs = new ArrayList<ViewTab>();
		}
		rtabs.add(viewTab);
	}
	
	public void removeViewTab(ViewTab viewTab) {
		if ( null == mainPanel || 
				null == tabs ) {
			return;
		}
		tabs.remove(viewTab);
	}
	
	public void addRefresher(Hook refresher) {
		if ( null == refreshers ) {
			refreshers = new ArrayList<Hook>();
		}
		if ( null != refresher ) {
			refreshers.add(refresher);
		}
	}
	
	public void refresh() {
		if ( null == refreshers ) {
			return;
		}
		for ( Hook refresher: refreshers ) {
			refresher.invoke();
		}
	}
	
}
