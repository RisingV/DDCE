package com.bdcom.dce.view;

import com.bdcom.dce.sys.AppContent;
import com.bdcom.dce.sys.ApplicationConstants;
import com.bdcom.dce.sys.gui.GuiInterface;
import com.bdcom.dce.util.LocaleUtil;
import com.bdcom.dce.view.message.MessageTable;
import com.bdcom.dce.view.message.SubmitHistoryTable;
import com.bdcom.dce.view.scripttest.ScriptEnvConfigDialog;
import com.bdcom.dce.view.util.Hook;
import com.bdcom.dce.view.util.ViewUtil;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.ArrayList;
import java.util.List;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-11-21 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public class MainFrame extends TopLevelFrame implements ApplicationConstants {
	
	private static final long serialVersionUID = -2215630151199687633L;

    private static final String SUBMIT_HISTORY_TABLE = "Submit History Table";
    private static final String EXECUTOR_CONFIG = "Script Executor Config";
	
	private List<Hook> refreshers;
	
	private JFrame thisFrame = this;
	
	private List<ViewTab> tabs;
	private List<ViewTab> rootTabs;
	private JTabbedPane mainPanel;
	
	private boolean init = false;
	private Image image;
	//private MsgTable msgTable;
    private MessageTable messageTable;
    private SubmitHistoryTable submitHistoryTable;
    private ScriptEnvConfigDialog scriptEnvConfigDialog;
	//private DebugRecordTable drTable;
	private JMenuBar mb;
	private JMenu menu;
	private JCheckBoxMenuItem ifDisplayMsgTable;
	//private JCheckBoxMenuItem debugRec;
    private JCheckBoxMenuItem ifDisplayHistoryTable;
    private JMenuItem configScriptEnvItem;
	private JMenuItem logoutItem;
    private final GuiInterface app;
	
	public MainFrame(GuiInterface app) {
        super(app);
        this.app = app;
		preInit();
	}
	
	public void setImage(Image image) {
		this.image = image;
	}
	
//	public MsgTable getMsgTable() {
//		return msgTable;
//	}

	private void preInit() {
//        msgTable = (MsgTable) app.getAttribute( COMPONENT.MSG_TABLE );
        messageTable = (MessageTable) app.getAttribute( COMPONENT.MESSAGE_TABLE );
        submitHistoryTable = (SubmitHistoryTable) app.getAttribute( COMPONENT.SUBMIT_HISTORY_TABLE );
        scriptEnvConfigDialog = (ScriptEnvConfigDialog) app.getAttribute( COMPONENT.SCRIPT_ENV_CONFIG_DIALOG );

		mb = new JMenuBar();
		menu = new JMenu( LocaleUtil.getLocalName(_OTHER) );
		ifDisplayMsgTable = new JCheckBoxMenuItem( LocaleUtil.getLocalName(MSG_LIST) );
        ifDisplayHistoryTable = new JCheckBoxMenuItem( LocaleUtil
                .getLocalName(SUBMIT_HISTORY_TABLE) );
        configScriptEnvItem = new JMenuItem( LocaleUtil.getLocalName( EXECUTOR_CONFIG ) );
		logoutItem = new JMenuItem( LocaleUtil.getLocalName(_LOG_OUT) );
		ifDisplayMsgTable.addItemListener( new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
//                        AbstractFrame msgTable =
//                                app.getFrame(COMPONENT.MSG_TABLE);
                if (ifDisplayMsgTable.isSelected()) {
                    messageTable.display();
                } else {
                    messageTable.close();
                }
            }
        });
        ifDisplayHistoryTable.addItemListener( new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if (ifDisplayHistoryTable.isSelected()) {
                    submitHistoryTable.display();
                } else {
                    submitHistoryTable.close();
                }
            }
        });
        configScriptEnvItem.addActionListener( new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                scriptEnvConfigDialog.display();
            }
        });
		logoutItem.addActionListener( new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                app.logout();
            }
        });
        messageTable.addWindowListener( new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                ifDisplayMsgTable.setSelected(false);
            }
         });
        submitHistoryTable.addWindowListener( new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                ifDisplayHistoryTable.setSelected(false);
            }
        }
        );
//		msgTable.addWindowListener(
//                new WindowAdapter() {
//                    public void windowClosing(WindowEvent e) {
//                        ifDisplayMsgTable.setSelected(false);
//                    }
//                }
//        );
		menu.add(ifDisplayMsgTable);
        menu.add(ifDisplayHistoryTable);
        menu.add(configScriptEnvItem);
		menu.add(logoutItem);
		mb.add(menu);
		this.setJMenuBar(mb);
	}
	
	@Override  
    protected void processWindowEvent(WindowEvent e) {  
        if (e.getID() == WindowEvent.WINDOW_CLOSING)  {
			int ok = JOptionPane.showConfirmDialog(
					thisFrame,
					LocaleUtil.getLocalName(_CONFIRM_EXIT),
					LocaleUtil.getLocalName(_MESSAGE),
					JOptionPane.YES_NO_OPTION);
			if ( ok == 0) {
				thisFrame.setVisible( true );
//				if ( app.getBoolAttr( USER.SUPERVISOR ) ) {
//					HttpClientWrapper.getInstance()
//						.clearDebugRecordsViaHttp();
//				}
                app.terminal();
			} else {
				return;
			}
        }
        super.processWindowEvent(e);
    }  
	
	public void init() {
		if (init) {
			return;
		}
		
		this.setIconImage(image);
        messageTable.setImage(image);
        submitHistoryTable.setImage(image);
		//msgTable.setImage(image);
        String title = LocaleUtil.getLocalName(SYS_NAME) +
                getTitleSuffix( app );
		this.setTitle( title );
		
		if ( null != tabs ) {
			for (ViewTab viewTab : tabs ) {
				mainPanel.addTab(
						viewTab.getTabTitle(),
						viewTab.getTabIcon(),
						viewTab.getTabComponent(),
						viewTab.getTabTip()
						);
			}
		}
		
		if ( null != rootTabs && app.getBoolAttr( USER.SUPERVISOR ) ) {
			for (ViewTab viewTab : rootTabs) {
				mainPanel.addTab(
						viewTab.getTabTitle(),
						viewTab.getTabIcon(),
						viewTab.getTabComponent(),
						viewTab.getTabTip()
						);
			}
		}
		
//		if ( app.getBoolAttr( USER.SUPERVISOR )) {
//			if ( null == drTable ) {
//				drTable = new DebugRecordTable(app);
//				drTable.setImage(image);
//				drTable.addWindowListener(
//						new WindowAdapter() {
//							public void windowClosing(WindowEvent e) {
//								debugRec.setSelected(false);
//							}
//						}
//					);
//			}
//			if ( null == debugRec ) {
//				debugRec = new JCheckBoxMenuItem(
//					LocaleUtil.getLocalName(RECENT_ADD2DB)
//				);
//				debugRec.addItemListener(
//					new ItemListener() {
//						@Override
//						public void itemStateChanged(ItemEvent e) {
//							if ( debugRec.isSelected() ) {
//								drTable.display();
//							} else {
//								drTable.hideFrame();
//							}
//						}
//					}
//				);
//			}
//			menu.removeAll();
//			menu.add(ifDisplayMsgTable);
//			menu.add(debugRec);
//			menu.add(logoutItem);
//		}

		Container con = this.getContentPane();
		con.add( mainPanel, BorderLayout.CENTER );
		this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		this.setResizable(false);
		this.pack();
		ViewUtil.centerWindow(this);
		
		init = true;
	}
	
	public void display0() {
		
		if ( (null == tabs || tabs.size() == 0) &&
				(null == rootTabs || rootTabs.size() == 0) ) {
			return;
		}
		
		if ( !init) {
			init();
		}
		this.setVisible(true);
	}
	
	public void close() {
		ifDisplayMsgTable.setSelected(false);
		//msgTable.close();
        messageTable.close();
		thisFrame.setVisible(false);
	}
	
	public Component getSelfFrame() {
		return thisFrame;
	}
	
	public void addViewTab(ViewTab viewTab) {
		if ( null == mainPanel ) {
		    mainPanel = new JTabbedPane();
		}
		if ( null == tabs ) {
			tabs = new ArrayList<ViewTab>();
		}
		tabs.add(viewTab);
	}
	
	public void addRootViewTab(ViewTab viewTab) {
		if ( null == mainPanel ) {
		    mainPanel = new JTabbedPane();
		}
		if ( null == rootTabs) {
			rootTabs = new ArrayList<ViewTab>();
		}
		rootTabs.add(viewTab);
	}
	
	public void removeViewTab(ViewTab viewTab) {
		if ( null == mainPanel || 
				null == tabs ) {
			return;
		}
		tabs.remove(viewTab);
	}
	
	public void addRefresher(Hook refresher) {
		if ( null == refreshers ) {
			refreshers = new ArrayList<Hook>();
		}
		if ( null != refresher ) {
			refreshers.add(refresher);
		}
	}
	
	public void refresh() {
		if ( null == refreshers ) {
			return;
		}
		for ( Hook refresher: refreshers ) {
			refresher.invoke();
		}
	}

    private String getTitleSuffix(AppContent app) {
        return app.getStringAttr( CONTENT.TITLE_SUFFIX );
    }
	
}
