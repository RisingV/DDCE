package com.bdcom.dce.view;

import com.bdcom.dce.biz.scenario.ScenarioMgr;
import com.bdcom.dce.biz.script.ScriptMgr;
import com.bdcom.dce.nio.exception.GlobalException;
import com.bdcom.dce.view.util.*;
import com.bdcom.dce.datadispacher.CommunicateStatus;
import com.bdcom.dce.nio.exception.ResponseException;
import com.bdcom.dce.nio.client.ClientProxy;
import com.bdcom.dce.sys.ApplicationConstants;
import com.bdcom.dce.sys.gui.GuiInterface;
import com.bdcom.dce.util.LocaleUtil;
import com.bdcom.dce.util.StringUtil;
import com.bdcom.dce.util.log.ErrorLogger;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Set;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-11-23 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public class ScriptMgrFrame extends JPanel
			implements CommunicateStatus, ViewTab, ApplicationConstants {
	
	private static final long serialVersionUID = -7556146538830756850L;
	
	private JPanel thisPanel = this;
	
	private String tabTitle;
	
	private Icon tabIcon;
	
	private String tabTip;
	
	private JLabel serialLabel;
	
	private JLabel scriptLabel;
	
	private JLabel beginIndexLabel;
	
	private JLabel rdpLabel;
	
	private JLabel indexLabel;
	
	private JLabel iptLabel;
	
	private JCheckBox rdpCBox;

	private JTextField rawDataPathTextField;
	
	private JTextField serialTextField;
	
	private JTextField scriptTextField;
	
	private JTextField indexTextField;
	
	private JTextField iptTextField;
	
	private JTextField beginIndexTextField;
	
	private JList scriptList;
	
	private JButton rdpSaveBt;
	
	private JButton editBt;
	
	private JButton saveBt;
	
	private JButton cancelBt;
	
	private JButton indexBt;
	
	private JButton delBt;
	
	private JButton iptSaveBt;
	
	private JButton uploadBt;
	
	private JButton downldBt;
	
	private JPanel rdpPanel;
	
	private JPanel editPanel;
	
	private JPanel indexPanel;
	
	private JPanel listPanel;
	
	private JPanel iptPanel;
	
	private String script2fix;
	
	private Hook scriListRefresher;

    private ScriptMgr scriptMgr;

    private GuiInterface app;

    private ClientProxy clientProxy;

	public ScriptMgrFrame( ClientProxy clientProxy, GuiInterface app) {

        this.clientProxy = clientProxy;
        this.app = app;

		init();
	}
	
	private void init() {
        initGlobalCompo();
		initLabels();
		initTextFields();
		initScriptList();
		initButtons();
		initRdpCBox();
		initPanels();
		initLayout();
	}

    private void initGlobalCompo() {
        scriptMgr = (ScriptMgr) app.getAttribute(COMPONENT.SCRIPT_MGR);
    }

	private void initLayout() {
		thisPanel.setLayout(new GridBagLayout());
		
		JSeparator sepH0 = new JSeparator(SwingConstants.HORIZONTAL);
		JSeparator sepH1 = new JSeparator(SwingConstants.HORIZONTAL);
		JSeparator sepV = new JSeparator(SwingConstants.VERTICAL);
		sepH0.setPreferredSize( new Dimension(600,2) );
		sepH1.setPreferredSize( new Dimension(600,2) );
		sepV.setPreferredSize( new Dimension(2,570) );
		sepH0.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
		sepH1.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
		sepV.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
		
		JPanel leftPanel = new JPanel();
		leftPanel.setLayout(new GridBagLayout()); 
		
		leftPanel.add(indexPanel, new GBC(0, 0).setInsets(2));
		leftPanel.add(sepH0, new GBC(0, 1).setInsets(5));
		leftPanel.add(editPanel, new GBC(0, 2).setInsets(2));
		leftPanel.add(sepH1, new GBC(0, 3).setInsets(5));
		leftPanel.add(rdpPanel, new GBC(0, 4).setInsets(2));
		leftPanel.add(iptPanel, new GBC(0, 5).setInsets(2));
		
		thisPanel.add(leftPanel, new GBC(0, 0).setInsets(2));
		thisPanel.add(sepV, new GBC(1, 0).setInsets(5));
		thisPanel.add(listPanel, new GBC(2, 0).setInsets(2));
	}
	
	private void initPanels() {
		if ( null == iptPanel ) {
			TitledBorder tb = new TitledBorder(
					getLocalName(SET_SCRIPT_IPT_PATH)
					);
			iptPanel = new JPanel();
			iptPanel.setPreferredSize(new Dimension(590, 120));
			iptPanel.setLayout(new GridBagLayout());
			iptPanel.setBorder(tb);
		}
		iptPanel.add(iptLabel, new GBC(0, 0)
							.setInsets(5, 10, 5, 10)
					);
		iptPanel.add(iptTextField, new GBC(1, 0)
							.setInsets(5, 10, 5, 10)
					);
		iptPanel.add(iptSaveBt, new GBC(2, 0)
							.setInsets(5, 10, 5, 10)
					);
		
		if ( null == rdpPanel ) {
			TitledBorder tb = new TitledBorder(
					getLocalName(SET_RAW_DATA_PATH)
					);
			rdpPanel = new JPanel();
			rdpPanel.setPreferredSize( new Dimension(590, 120) ); 
			rdpPanel.setLayout(new GridBagLayout());
			rdpPanel.setBorder(tb);
		}
		rdpPanel.add(rdpCBox, new GBC(0, 0)
								.setInsets(5, 10, 5, 10)
					);
		rdpPanel.add(rdpLabel, new GBC(0, 1)
								.setInsets(5, 10, 5, 10)
					);
		rdpPanel.add(rawDataPathTextField, new GBC(1, 1)
								.setInsets(5, 10, 5, 10)
					);
		rdpPanel.add(rdpSaveBt, new GBC(2, 1)
								.setInsets(5, 10, 5, 10)
					);
		
		if ( null == editPanel ) {
			TitledBorder tb = new TitledBorder(
					getLocalName(ADD_OR_MODIFY_SCRIPT)
					);
			editPanel = new JPanel();
			editPanel.setPreferredSize( new Dimension(590, 200) ); 
			editPanel.setLayout(new GridBagLayout());
			editPanel.setBorder(tb);
		}
		editPanel.add(serialLabel, new GBC(0, 0)
								.setInsets(5, 10, 5, 10)
								.setAnchor(GBC.WEST)
					);
		editPanel.add(serialTextField, new GBC(1, 0)
								.setInsets(5, 10, 5, 10)
								.setAnchor(GBC.WEST)
					);
		editPanel.add(scriptLabel, new GBC(0, 1)
								.setInsets(5, 10, 5, 10)
								.setAnchor(GBC.WEST)
					);
		editPanel.add(scriptTextField, new GBC(1, 1)
								.setInsets(5, 10, 5, 10)
								.setAnchor(GBC.WEST)
					);
		editPanel.add(beginIndexLabel,new GBC(0, 2)
								.setInsets(5, 10, 5, 10)
								.setAnchor(GBC.WEST)
					);
		editPanel.add(beginIndexTextField,new GBC(1, 2)
								.setInsets(5, 10, 5, 10)
								.setAnchor(GBC.WEST)
					);
		editPanel.add(saveBt, new GBC(0, 3)
								.setInsets(5, 100, 5, 10)
								.setAnchor(GBC.CENTER)
					);
		editPanel.add(cancelBt, new GBC(1, 3)
								.setInsets(5, 10, 5, 10)
								.setAnchor(GBC.CENTER)
					);
		
		if ( null == indexPanel) {
			TitledBorder tb = new TitledBorder(
					getLocalName(SEARCH_SCRIPT)
					);
			indexPanel = new JPanel();
			indexPanel.setPreferredSize( new Dimension(590, 120) ); 
			indexPanel.setLayout(new GridBagLayout());
			indexPanel.setBorder(tb);
		}
		indexPanel.add(indexLabel, new GBC(0, 0)
								.setInsets(5, 10, 5, 10)
								.setAnchor(GBC.WEST)
					);
		indexPanel.add(indexTextField, new GBC(1, 0)
								.setInsets(5, 10, 5, 10)
								.setAnchor(GBC.WEST)
					);
		indexPanel.add(indexBt, new GBC(2, 0)
								.setInsets(5, 10, 5, 10)
								.setAnchor(GBC.WEST)
					);
		indexPanel.add(uploadBt, new GBC(3, 0)
								.setInsets(5, 10, 5, 10)
								.setAnchor(GBC.WEST)
					);
		indexPanel.add(downldBt, new GBC(4, 0)
								.setInsets(5, 10, 5, 10)
								.setAnchor(GBC.WEST)
					);
		
		
		if ( null == listPanel ) {
			TitledBorder tb = new TitledBorder(
					getLocalName(SCRIPT_LIST)
					);
			listPanel = new JPanel();
			listPanel.setLayout(new GridBagLayout()); 
			listPanel.setBorder(tb);
			editBt.setEnabled(false);
			delBt.setEnabled(false);
		}
		JPanel listButtonPanel = new JPanel();
		listButtonPanel.setLayout(new GridBagLayout());
		listButtonPanel.add(editBt, new GBC(0,0)
								.setInsets(4,8,4,8)
					);
		listButtonPanel.add(delBt, new GBC(1,0)
								.setInsets(4,8,4,8)
					);
		
		JScrollPane jscroll = new JScrollPane(scriptList);
		jscroll.setPreferredSize(new Dimension(160, 480));
		
		listPanel.add(jscroll, new GBC(0,0)); 
		listPanel.add(listButtonPanel, new GBC(0,1));
		
	}
	
	private void initLabels() {
		
		if ( null == iptLabel ) {
			iptLabel = new JLabel();
			iptLabel.setText(
					getLocalName(SCRIPT_IPT_PATH)
					);
		}
		
		if ( null ==  beginIndexLabel ) {
			beginIndexLabel = new JLabel();
			beginIndexLabel.setText(
					getLocalName(BEGIN_INDEX)
					);
		}
		
		if ( null == serialLabel ) {
			serialLabel = new JLabel();
			serialLabel.setText(
					getLocalName(MATCHING_SERIAL)
					);
		}
		
		if ( null == scriptLabel ) {
			scriptLabel = new JLabel();
			scriptLabel.setText(
					getLocalName(SCRIPT_PATH)
					);
		}
		
		if ( null == rdpLabel ) {
			rdpLabel = new JLabel();
			rdpLabel.setText(
					getLocalName(RAW_DATA_PATH)
					);
		}
		
		if ( null == indexLabel ) {
			indexLabel = new JLabel();
			indexLabel.setText(
					getLocalName(SERIAL_NUM)
					); 
		}
		
	}
	
	private void initTextFields() {
		if ( null == iptTextField ) {
			iptTextField = new JTextField();
			iptTextField.setPreferredSize(new Dimension(250, 20));
			iptTextField.setText(
					scriptMgr.getDefaultConfigedIptPath()
					);
		}
		
		if ( null == beginIndexTextField ) {
			beginIndexTextField = new JTextField();
			beginIndexTextField.setDocument( new LimitedDocument(LimitedDocument.NUMBER, 2) );
			beginIndexTextField.setPreferredSize(new Dimension(100, 20));
		}
		
		if ( null == rawDataPathTextField ) {
			rawDataPathTextField = new JTextField();
			rawDataPathTextField.setPreferredSize(new Dimension(250, 20));
			rawDataPathTextField.setEnabled(false);
		}
		
		if ( null == serialTextField ) {
			serialTextField = new JTextField();
			serialTextField.setPreferredSize(new Dimension(300, 20));
		}
		
		if ( null == scriptTextField ) {
			scriptTextField = new JTextField();
			scriptTextField.setPreferredSize(new Dimension(300, 20)); 
		}
		
		if ( null == indexTextField ) {
			indexTextField = new JTextField();
			indexTextField.setPreferredSize(new Dimension(180, 20));
		}
		
	}
	
	private void initRdpCBox() {
		if ( null == rdpCBox ) {
			rdpCBox = new JCheckBox();
			rdpCBox.setText(
					getLocalName(IF_USE_DEFAULT_DIR)
					);
			
			boolean isUseDefaultRdp = scriptMgr.isUserDefaultRawDataPath();
			rdpCBox.setSelected( isUseDefaultRdp );
			if ( isUseDefaultRdp ) {
				rawDataPathTextField.setText("");
				rawDataPathTextField.setEnabled(false);
				rdpSaveBt.setEnabled(false);
			} else {
				rawDataPathTextField.setText(
						scriptMgr.getDefaultConfigedRawDataPath()
						);
				rawDataPathTextField.setEnabled(true);
				rdpSaveBt.setEnabled(true);
			}
			rdpCBox.addItemListener(
						new ItemListener() {
							public void itemStateChanged(ItemEvent e) {
								if (rdpCBox.isSelected()) {
									scriptMgr.isUserDefaultRawDataPath(true);
									rawDataPathTextField.setText("");
									rawDataPathTextField.setEnabled(false);
									rdpSaveBt.setEnabled(false);
								} else {
									scriptMgr.isUserDefaultRawDataPath(false);
									rawDataPathTextField.setText(
											scriptMgr.getDefaultConfigedRawDataPath()
											);
									rawDataPathTextField.setEnabled(true);
									rdpSaveBt.setEnabled(true);
								}
							}
						}
					);
		}
	}
	
	public Hook getScriptListRefreshHook() {
		if ( scriListRefresher == null ) {
			scriListRefresher = new Hook(this, "initScriptList");
		}
		return scriListRefresher;
	}
	
	private void initScriptList() {
		List<String> scriptSet = getScripSet();
		
		DefaultListModel model = null;
		if ( null == scriptList ) {
			 model = new DefaultListModel();
		} else {
			model = (DefaultListModel) scriptList.getModel();
			model.removeAllElements();
		}
		if ( null != scriptSet ) {
			int index = 0;
			for ( String scriptSerial : scriptSet ) {
				model.add(index, scriptSerial);
				index ++;
			}
		}
		
		if ( null == scriptList ) {
			scriptList = new JList(model);
			scriptList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			scriptList.setPreferredSize(new Dimension(150,480));
			scriptList.addListSelectionListener(
						new ListSelectionListener() {

							public void valueChanged(ListSelectionEvent e) {
								if ( scriptList.getSelectedIndex() >= 0 ) {
									editBt.setEnabled(true);
									delBt.setEnabled(true);
								} else {
									editBt.setEnabled(false);
									delBt.setEnabled(false);
								}
							}
							
						}
					);
		} else {
			scriptList.setModel(model);
			scriptList.revalidate();
		}
	}
	
	private List<String> getScripSet() {
		String indexSerial = indexTextField.getText();
		Set<String> set = scriptMgr.indexingSerials(indexSerial);
		
		List<String> list = new ArrayList<String>();
		if ( null != set && !set.isEmpty()) {
			for (String s : set) {
				list.add(s);
			}
			Collections.sort(list, Collections.reverseOrder());
		}
		
		return list;
	}
	
	private void initButtons() {
		if ( null == uploadBt ) {
			uploadBt = new JButton();
			uploadBt.setText(
					getLocalName(_UPLOAD)
					);  
			uploadBt.setPreferredSize(new Dimension(80, 25));
			uploadBt.addActionListener(
					new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent e) {
							new Thread(
								new Runnable() {
									@Override
									public void run() {
										uploadBt.setText(
												getLocalName(_UPLOADING)
												);  
										uploadBt.setEnabled(false);

                                        boolean uploadSuccess = true;
                                        String msg = null;
                                        try {
                                            uploadScriptConfig(scriptMgr);
                                        } catch (IOException e) {
                                            uploadSuccess = false;
                                            msg = "upload fail!";
                                        } finally {
                                            if ( uploadSuccess ) {
                                                msg = getLocalName(_UPLOAD_DONE_SCRIPT);
                                                MsgDialogUtil.showMsgDialog(msg);
                                            } else {
                                                MsgDialogUtil.showErrorDialog(msg);
                                            }
                                            uploadBt.setEnabled(true);
                                            uploadBt.setText(
                                                    getLocalName(_UPLOAD)
                                            );
                                            getMsgTable().addSysMsg(msg);
                                        }
									}
								}	
							).start();
						}
					}
				);
		}
		
		if ( null == downldBt ) {
			downldBt = new JButton();
			downldBt.setText(
					getLocalName(_DOWNLD)
					); 
			downldBt.setPreferredSize(new Dimension(80, 25));
			downldBt.addActionListener(
					new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent e) {
							new Thread(
								new Runnable() {
									@Override
									public void run() {
										downldBt.setText(
												getLocalName(_DOWNLDING)
												);  
										downldBt.setEnabled(false);

                                        boolean downloadSuccess = true;
                                        String msg = null;
                                        try {
                                            downloadScriptConfig(scriptMgr);
                                        } catch (IOException e) {
                                            downloadSuccess = false;
                                            ErrorLogger.log(e.getMessage());
                                            msg = "download fail!";
                                        } catch (ResponseException e) {
                                            downloadSuccess = false;
                                        } finally {
                                            if ( downloadSuccess ) {
                                                AbstractFrame mainFrame = app.getFrame( COMPONENT.MAIN_FRAME );
                                                mainFrame.refresh();
                                                msg = getLocalName(_DOWNLD_DONE_SCRIPT);
                                                MsgDialogUtil.showMsgDialog(msg);
                                            } else {
                                                MsgDialogUtil.showErrorDialog(msg);
                                            }
                                            downldBt.setEnabled(true);
                                            downldBt.setText(
                                                    getLocalName(_DOWNLD)
                                            );
                                            getMsgTable().addSysMsg(msg);
                                        }
									}
								}	
							).start();
						}
					}
				);
		}
		
		if ( null == iptSaveBt ) {
			iptSaveBt = new JButton();
			iptSaveBt.setText(
					getLocalName(SAVE_BT)
					);
			iptSaveBt.setPreferredSize(new Dimension(80, 25));
			iptSaveBt.addActionListener(
					new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent e) {
							String path = iptTextField.getText();
							if ( StringUtil.isNotBlank(path) ) {
								int status = scriptMgr.setDefaultIptPath(path);
								showMsgDialog(status);
							} else {
								showMsgDialog(NULL_PATH);
							}
						}
					}
					);
		}
		
		if ( null == rdpSaveBt ) {
			rdpSaveBt = new JButton();
			rdpSaveBt.setText(
					getLocalName(SAVE_BT)
					);
			rdpSaveBt.setPreferredSize(new Dimension(80, 25));
			rdpSaveBt.setEnabled(false);
			rdpSaveBt.addActionListener(
						new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								String path = rawDataPathTextField.getText();  
								if ( StringUtil.isNotBlank(path) ) {
									int status = scriptMgr.setRawDataPath(path);
									showMsgDialog(status);
								} else {
									showMsgDialog(NULL_PATH);
								}
							}
						}
					);
		}
		
		if ( null == editBt ) {
			editBt = new JButton();
			editBt.setText(
					getLocalName(EDIT_BT)
					);
			editBt.setPreferredSize(new Dimension(80, 25));
			editBt.addActionListener(
					new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								String serial = (String) scriptList.getSelectedValue();
								String path = scriptMgr.getScriptPath(serial);
								String beginIndex = scriptMgr.getBeginIndex(serial);
								script2fix = serial;
								serialTextField.setText(serial); 
								scriptTextField.setText(path);
								beginIndexTextField.setText(beginIndex);
							}
						}
					);
		}
		
		if ( null == saveBt ) {
			saveBt = new JButton();
			saveBt.setText(
					getLocalName(SAVE_BT)
					);
			saveBt.setPreferredSize(new Dimension(80, 25));
			saveBt.addActionListener(
						new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								boolean isVaild = true;
								int status = _NOT_DONE_YET;
								String serial = serialTextField.getText();
								String path = scriptTextField.getText();
								String beginIndex = beginIndexTextField.getText();
                                ScenarioMgr scenarioMgr = (ScenarioMgr)
                                        app.getAttribute( COMPONENT.SCENARIO_MGR );
								
								if ( !StringUtil.isNotBlank(serial) ) {
									showMsgDialog(NULL_SERIAL);
									isVaild = false;
								}
								
								if ( null != scenarioMgr.getScenarioByFullSerial(serial) ) {
									showMsgDialog(SERIAL_USED);
									isVaild = false;
								}
								
								if ( !StringUtil.isNotBlank(path) ) {
									showMsgDialog(NULL_PATH);
									isVaild = false;
								}
								
								int beginIndexInt = Integer.parseInt(beginIndex);
								if ( beginIndexInt < 0 ) {
									showMsgDialog(INVAILD_BEGIN_INDEX);
									isVaild = false;
								}
								
								if ( !isVaild ) {
									return;
								}
								
								if ( StringUtil.isNotBlank(script2fix) ) {
									status = scriptMgr
											.updateScript(script2fix, serial, path, beginIndex);
									script2fix = null;
								} else {
									status = scriptMgr.addScript(serial, path, beginIndex);
								}
							
								showMsgDialog(status);
							}
						}
					);
		}
		
		if ( null == cancelBt ) {
			cancelBt = new JButton();
			cancelBt.setText(
					getLocalName(CANCEL_BT) 
					);
			cancelBt.setPreferredSize(new Dimension(80, 25));
			cancelBt.addActionListener(
						new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								serialTextField.setText("");
								scriptTextField.setText("");
								beginIndexTextField.setText("");
								script2fix = null;
							}
						}
					);
		}
		
		if ( null == indexBt ) {
			indexBt = new JButton();
			indexBt.setText(
					getLocalName(INDEX_BT)
					);
			indexBt.setPreferredSize(new Dimension(80, 25));
			indexBt.addActionListener(
						new ActionListener() {
							public void actionPerformed(ActionEvent e) {
//								String indexStr = indexTextField.getText();
//								if ( StringUtil.isNotBlank(indexStr) ) {
									initScriptList();
//								} else {
//									showMsgDialog(NULL_SERIAL);
//								}
							}
						}
					);
		}
		
		if ( null == delBt ) {
			delBt = new JButton();
			delBt.setText(
					getLocalName(DEL_BT)
					);
			delBt.setPreferredSize(new Dimension(80, 25));
			delBt.addActionListener(
						new ActionListener() {
							public void actionPerformed(ActionEvent e) {
								String serial = (String) scriptList.getSelectedValue();
								if ( StringUtil.isNotBlank(serial) ) {
									scriptMgr.removeScript(serial);
									initScriptList();
								}
							}
						}
					);
		}
	}

    private void uploadScriptConfig(ScriptMgr scriptMgr) throws IOException {
        try {
            clientProxy.uploadScriptConfig(scriptMgr);
        } catch (GlobalException e) {
            MsgDialogUtil.reportGlobalException( e );
            app.logout();
        }
    }

    private void downloadScriptConfig(ScriptMgr scriptMgr) throws IOException, ResponseException {
        try {
            clientProxy.downloadScriptConfig(scriptMgr);
        } catch (GlobalException e) {
            MsgDialogUtil.reportGlobalException( e );
            app.logout();
        }
    }

    private MsgTable getMsgTable() {
        return (MsgTable) app.getFrame( COMPONENT.MSG_TABLE );
    }
	
	private void showMsgDialog(String msg) {
		MsgDialogUtil.showErrorDialogLocalised(msg);
	}
	
	private void showMsgDialog(int status) {
		if ( status <= 0 ) {
			MsgDialogUtil.showErrorDialog(
					MessageUtil.getMessageByStatusCode(status)
					);
		} else {
			MsgDialogUtil.showMsgDialog(
					MessageUtil.getMessageByStatusCode(status)
					);
		}
	}

	public void setTabTitle(String tabTitle) {
		this.tabTitle = tabTitle;
	}

	public String getTabTitle() {
		return tabTitle;
	}

	public void setTabIcon(Icon tabIcon) {
		this.tabIcon = tabIcon;
	}

	public Icon getTabIcon() {
		return tabIcon;
	}

	public Component getTabComponent() {
		return thisPanel;
	}

	public void setTabTip(String tabTip) {
		this.tabTip = tabTip;
	}

	public String getTabTip() {
		return tabTip;
	}
	
	private String getLocalName(String name) {
		return LocaleUtil.getLocalName(name);
	}
	
}
