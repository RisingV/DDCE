package com.bdcom.dce.view;

import com.bdcom.dce.biz.pojo.Scenario;
import com.bdcom.dce.biz.scenario.ScenarioMgr;
import com.bdcom.dce.biz.scenario.ScenarioUtil;
import com.bdcom.dce.biz.script.ScriptMgr;
import com.bdcom.dce.nio.exception.GlobalException;
import com.bdcom.dce.view.common.MsgTable;
import com.bdcom.dce.view.util.GBC;
import com.bdcom.dce.view.util.Hook;
import com.bdcom.dce.view.util.LimitedDocument;
import com.bdcom.dce.view.util.MsgDialogUtil;
import com.bdcom.dce.nio.exception.ResponseException;
import com.bdcom.dce.nio.client.ClientProxy;
import com.bdcom.dce.sys.ApplicationConstants;
import com.bdcom.dce.sys.gui.GuiInterface;
import com.bdcom.dce.util.LocaleUtil;
import com.bdcom.dce.util.StringUtil;
import com.bdcom.dce.util.logger.ErrorLogger;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.IOException;
import java.util.*;
import java.util.List;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-11-15  <br>
 * Auto-Generated by eclipse Juno <br>
 */

public class ScenarioMgrFrame extends JPanel implements
			ViewTab, ItemListener, ListSelectionListener, ApplicationConstants{
	
	private static final long serialVersionUID = 1935106599141259535L;
	
	private static final String[] FOCUSED_ATTRS = ScenarioUtil.getFocusedAttrs();
	
	private JPanel thisPanel = this;
	
	private String tabTitle;
	
	private Icon tabIcon;
	
	private String tabTip;
	
	private Hook scenarioListRefreshHook;
	
	private Hook localScelistRefreshHook;
	
	private Map<String, JLabel> labelGroup;
	
	private Map<String, JTextField> textFieldGroup;
	
	private JCheckBox[] attrCBoxs;
	
	private JList scenarioList;
	
	private JPanel topButtonPane;

	private JPanel attrsSelectPane;
	
	private JPanel attrsSettingPane;
	
	private JPanel scenarioListPane;
	
	private JButton createBt;
	
	private JButton cancelBt;
	
	private JButton syncBt;
	
	private JButton uploadBt;
	
	private JButton downldBt;
	
	private JButton saveBt;
	
	private JButton editBt;
	
	private JButton delBt;
	
	private Map<String, DocumentListener> generalDocListeners;
	
	private Scenario currentSce;

    private ScenarioMgr scenarioMgr;

    private final GuiInterface app;

    private final ClientProxy clientProxy;

    public ScenarioMgrFrame(ClientProxy clientProxy, GuiInterface app) {
        this.clientProxy = clientProxy;
        this.app = app;
        initGlobalCompo();
        composGeneralInit();
        layoutGeneralInit();
    }

    private void initGlobalCompo() {
        scenarioMgr = (ScenarioMgr)
                app.getAttribute(COMPONENT.SCENARIO_MGR);
        scenarioMgr.reloadScenarios();
    }

    private MsgTable getMsgTable() {
        MsgTable msgTable = (MsgTable)
                app.getAttribute(COMPONENT.MSG_TABLE);
        return msgTable;
    }
	
	public void setScenarioListRefreshHook(Hook scenarioListRefreshHook) {
		this.scenarioListRefreshHook = scenarioListRefreshHook;
	}
	
	public Hook getScenarioListRefreshHook() {
		if ( null == localScelistRefreshHook ) {
			localScelistRefreshHook = new Hook(this, "refreshScenarioList");
		}
		return localScelistRefreshHook;
	}

	public void composGeneralInit() {
		initPanels();
		initCompoGroups();
		initButtons();
	}
	
	public void layoutGeneralInit() {
		initTopButtonPaneLayout();
		initAttrsSelectPaneLayout();
		initAttrsSettingPaneLayout();
		initScenarioListPaneLayout();
		initMainPanleLayout();
	}
	
	private void initCompoGroups() {
		initLabelGroup();
		initTextFieldGroup();
		initAttrCBoxGroup();
	}
	
	private void initPanels() {
		initTopButtonPane();
		initAttrsSelectPane();
		initScenarioListPane();
		initAttrsSettingPane();
	}
	
	private void initButtons() {
		initCreateBt();
		initSaveBt();
		initCancelBt();
//		initSyncBt();
		initUploadBt();
		initDownldBt();
		initEditBt();
		initDelBt();
	}
	
	private void initMainPanleLayout() {
		this.setLayout(new GridBagLayout());
		
		JSeparator sepH0 = new JSeparator(SwingConstants.HORIZONTAL);
		JSeparator sepH1 = new JSeparator(SwingConstants.HORIZONTAL);
		JSeparator sepV = new JSeparator(SwingConstants.VERTICAL);
		sepH0.setPreferredSize( new Dimension(600,2) );
		sepH1.setPreferredSize( new Dimension(600,2) );
		sepV.setPreferredSize( new Dimension(2,570) );
		sepH0.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
		sepH1.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
		sepV.setBorder(BorderFactory.createEmptyBorder(5,5,5,5));
		
		JPanel leftPane = new JPanel();
		leftPane.setLayout( new GridBagLayout() );
		leftPane.add( topButtonPane, new GBC(0, 0).setInsets(2).setAnchor(GBC.NORTH) );
		leftPane.add( sepH0, new GBC(0, 1).setInsets(5) );
		leftPane.add( attrsSelectPane, new GBC(0, 2).setInsets(2) );
		leftPane.add( sepH1, new GBC(0, 3).setInsets(5) );
		leftPane.add( attrsSettingPane, new GBC(0, 4).setInsets(2) );
		
		this.add(leftPane, new GBC(0, 0));
		this.add(sepV, new GBC(1, 0));
		this.add(scenarioListPane, new GBC(2, 0));
		
	}
	
	private void initTopButtonPaneLayout() {
		topButtonPane.setPreferredSize(new Dimension(590,80) );
		topButtonPane.add(createBt, new GBC(0, 0)
									.setInsets(10, 20, 10, 20)
									.setAnchor(GBC.WEST)
									.setFill(GBC.HORIZONTAL)
						 );
		topButtonPane.add(saveBt, new GBC(1, 0)
									.setInsets(10, 20, 10, 20)
									.setAnchor(GBC.WEST)
									.setFill(GBC.HORIZONTAL)
						 );
		topButtonPane.add(cancelBt, new GBC(2, 0)
									.setInsets(10, 20, 10, 20)
									.setAnchor(GBC.WEST)
									.setFill(GBC.HORIZONTAL)
						 );
		topButtonPane.add(uploadBt, new GBC(3, 0)
									.setInsets(10, 20, 10, 20)
									.setAnchor(GBC.WEST)
									.setFill(GBC.HORIZONTAL)
						 );
		topButtonPane.add(downldBt, new GBC(4, 0)
									.setInsets(10, 20, 10, 20)
									.setAnchor(GBC.WEST)
									.setFill(GBC.HORIZONTAL)
						 );
//		topButtonPane.add(syncBt, new GBC(3, 0)
//									.setInsets(10, 20, 10, 40)
//									.setAnchor(GBC.WEST)
//									.setFill(GBC.HORIZONTAL)
//						 );
	}
	
	private void initAttrsSelectPaneLayout() {
		attrsSelectPane.setPreferredSize( new Dimension(590, 180) );
		int index = 0;
		for (JCheckBox jcb : attrCBoxs) {
			attrsSelectPane.add(jcb, new GBC(index % 4, index / 4)
									  .setInsets(5, 10, 5, 10)
									  .setAnchor(GBC.WEST)
							   );
			index ++;
		}
	}
	
	private void initScenarioListPaneLayout() {
		initScenarioList();
		JPanel smallBtPane = new JPanel();
		JScrollPane jscroll = new JScrollPane(scenarioList);
		jscroll.setPreferredSize(new Dimension(160, 480));
		
		smallBtPane.setLayout( new GridBagLayout() );
		smallBtPane.add( editBt, new GBC(0, 0).setInsets(3) );
		smallBtPane.add( delBt, new GBC(1, 0).setInsets(3) );
		
		//scenarioListPane.setPreferredSize(new Dimension(60, 565));
		scenarioListPane.add(jscroll, new GBC(0, 0)
										.setInsets(5)
										.setFill(GBC.BOTH)
							);
		scenarioListPane.add(smallBtPane, new GBC(0,1) 
										.setInsets(5)
										.setFill(GBC.BOTH)
							);
	}
	
	private void initAttrsSettingPaneLayout() {
		attrsSettingPane.setPreferredSize( new Dimension(590, 280) );
	}
	
	private void initLabelGroup() {
		if ( null == labelGroup ) {
			labelGroup = new HashMap<String, JLabel>(15);
			for (String attr : FOCUSED_ATTRS) {
				JLabel label = new JLabel();
				label.setPreferredSize(new Dimension(80,20));
				label.setText(
						getLocalName(attr)
						);
				labelGroup.put(attr, label);
			}
			JLabel sNameLabel = new JLabel();
			JLabel sNumLabel = new JLabel();
			JLabel indexLabel = new JLabel();
			sNameLabel.setPreferredSize(new Dimension(80,20));
			sNameLabel.setText(
					getLocalName(SCENARIO_NAME)
					);
			sNumLabel.setText(
					getLocalName(MATCH_SERIAL)
					);
			indexLabel.setText(
					getLocalName(BEGIN_INDEX)
					);
			labelGroup.put(SCENARIO_NAME, sNameLabel);
			labelGroup.put(MATCH_SERIAL, sNumLabel);
			labelGroup.put(BEGIN_INDEX, indexLabel);
		}
	}
	
	private void initTextFieldGroup() {
		if ( null == textFieldGroup ) {
			textFieldGroup = new HashMap<String, JTextField>(15);
			for (String attr : FOCUSED_ATTRS) {
				JTextField jtf = new JTextField();
				jtf.setPreferredSize(new Dimension(160,20));
				jtf.setName(attr);
				jtf.setEditable(true);
				jtf.getDocument().addDocumentListener(
						getDocumentListener(jtf)
						);
				textFieldGroup.put(attr, jtf);
			}
			final JTextField sNameField = new JTextField();
			final JTextField sNumField = new JTextField();
			final JTextField bindexField = new JTextField();
			bindexField.setDocument( new LimitedDocument(LimitedDocument.NUMBER, 2) );
			
			sNameField.setPreferredSize(new Dimension(160,20));
			sNumField.setPreferredSize(new Dimension(160,20));
			bindexField.setPreferredSize(new Dimension(160,20));
			sNameField.setName(SCENARIO_NAME);
			sNumField.setName(MATCH_SERIAL);
			bindexField.setName(BEGIN_INDEX);
			sNameField.setEditable(true);
			sNumField.setEditable(true);
			bindexField.setEditable(true);
			
			sNameField.getDocument().addDocumentListener(
						new DocumentListener() {
							public void insertUpdate(DocumentEvent e) {
								handler(e);
							}
							public void removeUpdate(DocumentEvent e) {
								handler(e);
							}
							public void changedUpdate(DocumentEvent e) {
								handler(e);
							}
							private void handler(DocumentEvent e) {
								String sceName = sNameField.getText();
								if (null != sceName && StringUtil.isNotBlank( sceName ) ) {
									currentSce.setScenarioName( sceName );
								}
							}
						}
					);
			sNumField.getDocument().addDocumentListener(
						new DocumentListener() {
							public void insertUpdate(DocumentEvent e) {
								handler(e);
							}
							public void removeUpdate(DocumentEvent e) {
								handler(e);
							}
							public void changedUpdate(DocumentEvent e) {
								handler(e);
							}
							private void handler(DocumentEvent e) {
								String serialNum = sNumField.getText();
								if (null != serialNum&& StringUtil.isNotBlank( serialNum ) ) {
									currentSce.setSerial(serialNum);
								}
							}
						}
					);
			bindexField.getDocument().addDocumentListener(
						new DocumentListener() {
							public void insertUpdate(DocumentEvent e) {
								handler(e);
							}
							public void removeUpdate(DocumentEvent e) {
								handler(e);
							}
							public void changedUpdate(DocumentEvent e) {
								handler(e);
							}
							private void handler(DocumentEvent e) {
								String beginIndex = bindexField.getText();
								if (null != beginIndex && StringUtil.isNotBlank( beginIndex ) ) {
									currentSce.setBeginIndex(
											Integer.parseInt(beginIndex)
											);
								}
							}
						}
					);
			textFieldGroup.put(SCENARIO_NAME, sNameField);
			textFieldGroup.put(MATCH_SERIAL, sNumField);
			textFieldGroup.put(BEGIN_INDEX, bindexField);
		}
	}
	
	private void clearAllTextFields() {
		for (String attr: FOCUSED_ATTRS) {
			JTextField jtf = textFieldGroup.get(attr);
			if ( null != jtf ) {
				changeTextFieldWithoutListener(jtf, "");
			}
		}
	}
	
	private void clearAllTextFields(Scenario sce) {
		Set<String> attrs = sce.getAttrNames();
		for ( String attr : attrs ) {
			JTextField jtf = textFieldGroup.get(attr);
			if ( null != jtf ) {
				changeTextFieldWithoutListener(jtf, "");
			}
		}
		JTextField sfield = textFieldGroup.get(SCENARIO_NAME);
		sfield.setText("");
	}
	
	private void initAttrCBoxGroup() {
		attrCBoxs = new JCheckBox[FOCUSED_ATTRS.length];
		for (int i = 0 ; i < attrCBoxs.length; i++) {
			attrCBoxs[i] = new JCheckBox(
					getLocalName(
						FOCUSED_ATTRS[i]
							)
					);
			attrCBoxs[i].setName(FOCUSED_ATTRS[i]);
			attrCBoxs[i].setSelected(false);
			attrCBoxs[i].addItemListener(this);
			attrCBoxs[i].setEnabled(false);
		}
	}
	
	private void initTopButtonPane() {
		if ( null == topButtonPane ) {
			TitledBorder tb = new TitledBorder(
					getLocalName(CREATE_SCES)
					);
			topButtonPane = new JPanel();
			topButtonPane.setLayout(new GridBagLayout());
			topButtonPane.setBorder(tb);
		}
	}
	
	private void initAttrsSelectPane() {
		if ( null == attrsSelectPane ) {
			TitledBorder tb = new TitledBorder(
					getLocalName(SELECT_ATTRS)
					);
			attrsSelectPane = new JPanel();
			attrsSelectPane.setLayout(new GridBagLayout());
			attrsSelectPane.setBorder(tb);
		}
	}
	
	private void initScenarioListPane() {
		if ( null == scenarioListPane ) {
			TitledBorder tb = new TitledBorder(
					getLocalName(DEFINED_SCENARIOS)
					);
			scenarioListPane = new JPanel();
			scenarioListPane.setLayout(new GridBagLayout());
			scenarioListPane.setBorder(tb);
		}
	}
	
	private void initAttrsSettingPane() {
		if ( null == attrsSettingPane) {
			TitledBorder tb = new TitledBorder(
					getLocalName(SETTING_ATTRS)
					);
			attrsSettingPane = new JPanel();
			attrsSettingPane.setLayout(new GridBagLayout());
			attrsSettingPane.setBorder(tb);
		}
	}
	
	private void refreshScenarioList() {
		initScenarioList();
		if ( null != scenarioListRefreshHook) {
			scenarioListRefreshHook.invoke();
		}
		scenarioListPane.repaint();
	}
	
	private void initScenarioList() { // also with the function of refresh
		List<String> sceList = getScenarioList();
		if ( null == scenarioList ) {
			DefaultListModel model = new DefaultListModel();
			
			if ( null != sceList ) {
				int index = 0;
				for ( String sceName : sceList ) {
					model.add(index, sceName);
					index ++;
				}
			}
			scenarioList = new JList(model);
			scenarioList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
			scenarioList.addListSelectionListener(
						new ListSelectionListener() {

							public void valueChanged(ListSelectionEvent e) {
								if ( scenarioList.getSelectedIndex() >= 0 ) {
									editBt.setEnabled(true);
									delBt.setEnabled(true);
								} else {
									editBt.setEnabled(false);
									delBt.setEnabled(false);
								}
							}
							
						}
					);
		} else {
			DefaultListModel model = (DefaultListModel) scenarioList.getModel();
			model.removeAllElements();
			int index = 0;
			for ( String sceName : sceList ) {
				model.add(index, sceName);
				index ++;
			}
			scenarioList.revalidate();
		}
	}
	
	private void initCreateBt() {
		if ( null == createBt ) {
			createBt = new JButton(
					getLocalName(CREATE_BT)
					);
			createBt.setPreferredSize(new Dimension(80, 25));
			createBt.addActionListener(
						new ActionListener() {

							public void actionPerformed(ActionEvent e) {
								cancelBt.setEnabled(true);
								saveBt.setEnabled(true);
								if ( currentSce ==  null || !currentSce.isNoAttrAdded() ) {
									currentSce = new Scenario();
								}
								enableAllAttrCBoxs();
								unselectAllAttrBoxs();
								createBt.setEnabled(false);
							}
							
						}
					);
		}
	}
	
	private void initCancelBt() {
		if ( null == cancelBt ) {
			cancelBt = new JButton(
					getLocalName(CANCEL_BT)
					);
			cancelBt.setPreferredSize(new Dimension(80, 25));
			cancelBt.setEnabled(false);
			cancelBt.addActionListener(
						new ActionListener() {

							public void actionPerformed(ActionEvent e) {
								if ( null != currentSce && 
										!currentSce.isNoAttrAdded() ) {
									clearAllTextFields(currentSce);
									currentSce = new Scenario();
								}
								createBt.setEnabled(true);
								saveBt.setEnabled(false);
								cancelBt.setEnabled(false);
								unselectAllAttrBoxs();
								disableAllAttrCBoxs();
								refreshAttrSettingList();
							}
							
						}
					);
		}
	}
	
	private void initUploadBt() {
		if ( null == uploadBt ) {
			uploadBt = new JButton();
			uploadBt.setText(
					getLocalName(_UPLOAD)
					);  
			uploadBt.setPreferredSize(new Dimension(80, 25));
			uploadBt.addActionListener(
					new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent e) {
							new Thread(
								new Runnable() {
									@Override
									public void run() {
										uploadBt.setText(
												getLocalName(_UPLOADING)
												);  
										uploadBt.setEnabled(false);

                                        boolean uploadSuccess = true;
                                        try {
                                            uploadScenarios(scenarioMgr);
                                        } catch (IOException e) {
                                            uploadSuccess = false;
                                            ErrorLogger.log("when uploading scenarios: " + e.getMessage());
                                        } finally {
                                            String msg = null;
                                            if ( uploadSuccess ) {
                                                msg = getLocalName(_UPLOAD_DONE_SCE);
                                                MsgDialogUtil.showMsgDialog(msg);
                                            } else {
                                                msg = "upload scenario fail!!";
                                                MsgDialogUtil.showErrorDialog(msg);
                                            }
                                            uploadBt.setEnabled(true);
                                            uploadBt.setText(
                                                    getLocalName(_UPLOAD)
                                            );
                                            getMsgTable().addSysMsg(msg);
                                        }
									}
								}	
							).start();
						}
					}
				);
		}
	}

	private void initDownldBt() {
		if ( null == downldBt ) {
			downldBt = new JButton();
			downldBt.setText(
					getLocalName(_DOWNLD)
					); 
			downldBt.setPreferredSize(new Dimension(80, 25));
			downldBt.addActionListener(
					new ActionListener() {
						@Override
						public void actionPerformed(ActionEvent e) {
							new Thread(
								new Runnable() {
									@Override
									public void run() {
										downldBt.setText(
												getLocalName(_DOWNLDING)
												);  
										downldBt.setEnabled(false);
                                        String msg = null;
                                        boolean downloadSuccess = true;
                                        try {
                                            downloadScenarios(scenarioMgr);
                                        } catch (IOException e) {
                                            msg = "download fail!";
                                            downloadSuccess = false;
                                            ErrorLogger.log(e.getMessage());
                                        } catch (ResponseException e) {
                                            msg = e.getMessage();
                                            downloadSuccess = false;
                                            ErrorLogger.log(msg);
                                        } finally {
                                            if ( downloadSuccess ) {
                                                msg = getLocalName(_DOWNLD_DONE_SCE);
                                                AbstractFrame mainFrame = app.getFrame(COMPONENT.MAIN_FRAME);
                                                mainFrame.refresh();
                                                MsgDialogUtil.showMsgDialog(msg);
                                            } else {
                                                MsgDialogUtil.showErrorDialog(msg);
                                            }
                                            downldBt.setEnabled(true);
                                            downldBt.setText(
                                                    getLocalName(_DOWNLD)
                                            );
                                            getMsgTable().addSysMsg(msg);
                                        }
									}
								}	
							).start();
						}
					}
				);
		}
	}
	
	private void initSyncBt() {
		if ( null == syncBt ) {
			syncBt = new JButton(
					getLocalName(SYNC_BT)
					);
			syncBt.setPreferredSize(new Dimension(80, 25));
		}
	}
	
	private void initSaveBt() {
		if ( null == saveBt ) {
			saveBt = new JButton(
					getLocalName(SAVE_BT)
					);
			saveBt.setPreferredSize(new Dimension(80, 25));
			saveBt.setEnabled(false);
			saveBt.addActionListener(
						new ActionListener() {

							public void actionPerformed(ActionEvent e) {
								if ( validationBeforeSaving() ) {
									cancelBt.setEnabled(false);
									saveBt.setEnabled(false);
                                    scenarioMgr.addScenario(currentSce);
									clearAllTextFields();
									currentSce = new Scenario();
									refreshScenarioList();
									unselectAllAttrBoxs();
									refreshAttrSettingList();
									disableAllAttrCBoxs();
									createBt.setEnabled(true);
								}
							}
							
						}
					);
		}
	}
	
	private boolean validationBeforeSaving() {
        ScriptMgr scriptMgr =
                (ScriptMgr) app.getAttribute(COMPONENT.SCRIPT_MGR);

		if ( scenarioMgr.isScenarioNameReduplicated(currentSce) ) {
			MsgDialogUtil.showErrorDialogLocalised(SCE_NAME_REDUPLICATED);
			return false;
		}
		String serialNum = currentSce.getSerial();
		if ( !StringUtil.isNotBlank(serialNum) ) {
			MsgDialogUtil.showErrorDialogLocalised("serial number can't be blank!");
			return false;
		}
		if ( scriptMgr.isSerialNumUsed(serialNum) ) {
			MsgDialogUtil.showErrorDialogLocalised("serial number has used for script!");
			return false;
		}
		Set<String> selectedAttrSet = currentSce.getAttrNames();
		for ( String attrName : selectedAttrSet) {
			String attrValue = currentSce.getAttr(attrName);
			if ( null == attrValue || !StringUtil.isNotBlank(attrValue) ) {
				String msg = LocaleUtil.getLocalName(attrName) + 
						LocaleUtil.getLocalName(IS_BLANK);
				MsgDialogUtil.showErrorDialog(msg);
				return false;
			}
		}
		return true;
	}
	
	private void initEditBt() {
		if ( null == editBt ) {
			editBt = new JButton(
					getLocalName(EDIT_BT)
					);
			editBt.setPreferredSize(new Dimension(80, 25));
			editBt.setEnabled(false);
			editBt.addActionListener(
						new ActionListener() {

							public void actionPerformed(ActionEvent e) {
								if ( scenarioList.getSelectedIndex() >= 0 ) {
									createBt.setEnabled(false);
									saveBt.setEnabled(true);
									cancelBt.setEnabled(true);
									
									String sceName = (String) scenarioList
											.getSelectedValue();
                                    Scenario savedSce =
                                            scenarioMgr.getScenarioByName(sceName);
									if ( null != savedSce) {
										currentSce = savedSce;
									} else {
										currentSce = new Scenario();
									}
									clearAllTextFields();
									selectFocusedAttrBoxs(currentSce);
									enableAllAttrCBoxs();
									refreshAttrSettingList();
								}
							}
							
						}
					);
		}
		
	}
	
	private void initDelBt() {
		if ( null == delBt ) {
			delBt = new JButton(
					getLocalName(DEL_BT)
					);
			delBt.setPreferredSize( new Dimension(80, 25) );
			delBt.setEnabled(false);
			delBt.addActionListener(
						new ActionListener() {

							public void actionPerformed(ActionEvent e) {
								if ( scenarioList.getSelectedIndex() >= 0 ) {
									
									String sceName = (String) scenarioList
											.getSelectedValue();
									Scenario savedSce =
                                            scenarioMgr.getScenarioByName(sceName);
									if ( null != savedSce) {
										if ( currentSce == savedSce ) {
											currentSce = new Scenario();
											
											createBt.setEnabled(true);
											saveBt.setEnabled(false);
											cancelBt.setEnabled(false);
											
											unselectAllAttrBoxs();
											disableAllAttrCBoxs();
											clearAllTextFields(savedSce);
											refreshAttrSettingList();
										}
									}
                                    scenarioMgr.removeScenario(savedSce.getScenarioName());
									refreshScenarioList();
								}
							}
							
						}
					);
		}
	}
	
	private void enableAllAttrCBoxs() {
		for (JCheckBox jcb : attrCBoxs) {
			jcb.setEnabled(true);
		}
	}
	
	private void disableAllAttrCBoxs() {
		for (JCheckBox jcb : attrCBoxs) {
			jcb.setEnabled(false);
		}
	}
	
	private void unselectAllAttrBoxs() {
		for ( JCheckBox jcb : attrCBoxs ) {
			ItemListener[] ils = jcb.getItemListeners();
			for ( ItemListener il : ils ) { //unbound listener
				jcb.removeItemListener(il);
			}
			jcb.setSelected(false);
			for ( ItemListener il : ils ) {//rebound listener
				jcb.addItemListener(il);
			}
		}
	}

    private void uploadScenarios(ScenarioMgr scenarioMgr) throws IOException {
        try {
            clientProxy.uploadScenarios(scenarioMgr);
        } catch (GlobalException e) {
            MsgDialogUtil.reportGlobalException( e );
            app.logout();
        }
    }

    private void downloadScenarios(ScenarioMgr scenarioMgr)
            throws IOException, ResponseException {
        try {
            clientProxy.downloadScenarios(scenarioMgr);
        } catch (GlobalException e) {
            MsgDialogUtil.reportGlobalException( e );
            app.logout();
        }
    }

	private void selectFocusedAttrBoxs(Scenario sce) {
		unselectAllAttrBoxs();
		Set<String> attrNames = sce.getAttrNames();
		for ( JCheckBox jcb : attrCBoxs ) {
			String jcbName = jcb.getName();
			ItemListener[] ils = jcb.getItemListeners();
			for ( ItemListener il : ils ) { //unbound listener
				jcb.removeItemListener(il);
			}
			for ( String attrName : attrNames ) {
				if ( attrName.equals(jcbName) ) {
					jcb.setSelected(true);
				}
			}
			for ( ItemListener il : ils ) {//rebound listener
				jcb.addItemListener(il);
			}
		}
		
	}

	public void itemStateChanged(ItemEvent e) {
		Object source = e.getItemSelectable();
		JCheckBox cb = (JCheckBox) source;
		String attrName = cb.getName();
		if ( !isAddedToScenrio(attrName) && cb.isSelected() ) {
			addAttrToScenario(attrName);
		} else {
			removeAttrFromScenrio(attrName);
		}
		refreshAttrSettingList();
	}
	
	public void valueChanged(ListSelectionEvent e) {
		scenarioList.getSelectedValue();
	}
	
	
	private void refreshAttrSettingList() {
		attrsSettingPane.removeAll();
		Set<String> attrs =  currentSce.getAttrNames();
		
		if ( !attrs.isEmpty() ) {
			JLabel sLabel = labelGroup.get(SCENARIO_NAME);
			JLabel snumLabel = labelGroup.get(MATCH_SERIAL);
			JLabel biLabel =  labelGroup.get(BEGIN_INDEX);
			JTextField sField = textFieldGroup.get(SCENARIO_NAME);
			JTextField snumField = textFieldGroup.get(MATCH_SERIAL);
			JTextField biField = textFieldGroup.get(BEGIN_INDEX);
			
			String sName = currentSce.getScenarioName();
			String sNum = currentSce.getSerial();
			int beginIndex = currentSce.getBeginIndex();
			if ( StringUtil.isNotBlank(sName) ) {
				sField.setText(sName);
			} else {
				sField.setText("");
			}
			if ( StringUtil.isNotBlank(sNum) ) {
				snumField.setText(sNum);
			} else {
				snumField.setText("");
			}
			if ( beginIndex >= 0 ) {
				biField.setText( String.valueOf(beginIndex) );
			} else {
				biField.setText("");
			}
			
			sLabel.setForeground(Color.BLUE);
		    snumLabel.setForeground(Color.BLUE);
		    biLabel.setForeground(Color.BLUE);
			attrsSettingPane.add(sLabel, new GBC(0, 0)
									  .setAnchor(GBC.WEST)
									  .setInsets(8, 8, 8, 8)
									  .setFill(GBC.HORIZONTAL)
								);
			attrsSettingPane.add(sField, new GBC(1, 0)
									  .setAnchor(GBC.WEST)
									  .setInsets(8, 8, 8, 8)
								);
			attrsSettingPane.add(snumLabel, new GBC(2, 0)
									  .setAnchor(GBC.WEST)
									  .setInsets(8, 8, 8, 8)
									  .setFill(GBC.HORIZONTAL)
								);
			attrsSettingPane.add(snumField, new GBC(3, 0)
									  .setAnchor(GBC.WEST)
									  .setInsets(8, 8, 8, 8)
									  .setFill(GBC.HORIZONTAL)
								);
			
			attrsSettingPane.add(biLabel, new GBC(0, 1)
									  .setAnchor(GBC.WEST)
									  .setInsets(8, 8, 8, 8)
									  .setFill(GBC.HORIZONTAL)
								);
			attrsSettingPane.add(biField, new GBC(1, 1)
									  .setAnchor(GBC.WEST)
									  .setInsets(8, 8, 8, 8)
								);
			int location = 2;
			for (String attr : attrs) {
				JLabel label = labelGroup.get(attr);
				JTextField field = textFieldGroup.get(attr);
				if ( null == label || null == field ) {
					continue;
				}
				String text = currentSce.getAttr(attr);
				if ( null != text && StringUtil.isNotBlank(text) ) {
					changeTextFieldWithoutListener(field, text);
				}
				if (location % 2 == 0) {
					attrsSettingPane.add(label, 
							new GBC(0 , location).setAnchor(GBC.WEST)
												  .setInsets(4, 8, 4, 8)
												  .setFill(GBC.HORIZONTAL)
											 );
					attrsSettingPane.add(field, 
							new GBC(1 , location).setAnchor(GBC.WEST)
												  .setInsets(4, 8, 4, 8)
											 );
				} else {
					attrsSettingPane.add(label, 
							new GBC(2, location -1).setAnchor(GBC.WEST)
												   .setInsets(4, 8, 4, 8)
												   .setFill(GBC.HORIZONTAL)
											 );
					attrsSettingPane.add(field, 
							new GBC(3, location -1).setAnchor(GBC.WEST)
											  	   .setInsets(4, 8, 4, 8)
											 );
				}
				location ++ ;
			}
		} 
		attrsSettingPane.revalidate();
		attrsSettingPane.repaint();
	}
	
	private void addAttrToScenario(String attr) {
		currentSce.putAttr(attr, ""); // "" is placeholder
	}
	
	private void removeAttrFromScenrio(String attr) {
		currentSce.rmAttr(attr);
	}
	
	private boolean isAddedToScenrio(String attr) {
		String attrValue = currentSce.getAttr(attr);
		if ( null == attrValue ) {
			return false;
		} else {
			return true;
		}
	}

	private List<String> getScenarioList() {
		Set<String> set = scenarioMgr.getScenarioNameList();
		List<String> list = new ArrayList<String>();
		if ( null != set && !set.isEmpty()) {
			for (String s : set) {
				list.add(s);
			}
			Collections.sort(list, Collections.reverseOrder());
		}
		return list;
	}
	
	private String getLocalName(String name) {
		return LocaleUtil.getLocalName(name);
	}

	private void changeTextFieldWithoutListener(final JTextField jtf, String newValue) {
		DocumentListener docListener = getDocumentListener(jtf);
		
		//unbound docListener
		jtf.getDocument().removeDocumentListener(docListener);
		
		jtf.setText(newValue);
		
		//rebound docListener
		jtf.getDocument().addDocumentListener(docListener);
	}

	private DocumentListener getDocumentListener(final JTextField jtf) {
		if ( null == generalDocListeners ) {
			generalDocListeners = new HashMap<String, DocumentListener>();
		}
		
		String attrName = jtf.getName();
		
		DocumentListener docListener = generalDocListeners.get(attrName);
		if ( null == docListener ) {
			docListener = new DocumentListener() {
	
				public void insertUpdate(DocumentEvent e) {
					handle(e);
				}
	
				public void removeUpdate(DocumentEvent e) {
					handle(e);
				}
	
				public void changedUpdate(DocumentEvent e) {
					handle(e);
				}
				
				private void handle(DocumentEvent e) {
					String newValue = jtf.getText();
					String attrName = jtf.getName();
					currentSce.putAttr(attrName, newValue);
				}
				
			};
			generalDocListeners.put(attrName, docListener);
		}
		return docListener;
	}

	public void setTabTitle(String tabTitle) {
		this.tabTitle = tabTitle;
	}

	public String getTabTitle() {
		return tabTitle;
	}

	public void setTabIcon(Icon tabIcon) {
		this.tabIcon = tabIcon;
	}

	public Icon getTabIcon() {
		return tabIcon;
	}

	public Component getTabComponent() {
		return thisPanel;
	}

	public void setTabTip(String tabTip) {
		this.tabTip = tabTip;
	}

	public String getTabTip() {
		return tabTip;
	}

}
