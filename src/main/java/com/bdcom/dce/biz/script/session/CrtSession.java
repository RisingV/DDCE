package com.bdcom.dce.biz.script.session;

import com.bdcom.dce.util.logger.ErrorLogger;
import com.bdcom.dce.biz.script.ScriptXmlConfConstants;
import com.bdcom.dce.util.StringUtil;

import java.io.IOException;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-12-10 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public class CrtSession implements ScriptXmlConfConstants {

	private Process process;
	private String crtSessionName;
	private String interpreterPath;
	private boolean running = false;

	public String getInterpreterPath() {
		return interpreterPath;
	}

	public void setInterpreterPath(String interpreterPath) {
		this.interpreterPath = interpreterPath;
	}

	public String getCrtSessionName() {
		return crtSessionName;
	}

	public void setCrtSessionName(String crtSessionName) {
		this.crtSessionName = crtSessionName;
	}

	public boolean isRunning() {
		return running;
	}

    public void runScript(String scriptPath) throws IOException, InterruptedException {
        process = runScript0( scriptPath, true );
    }

    public int runScriptAndWait(String scriptPath) throws IOException, InterruptedException {
        process = runScript0( scriptPath, false );
        return process.waitFor();
    }

	private Process runScript0(String scriptPath, boolean runWaitThread) throws IOException, InterruptedException {
		String cmd = getCmd(interpreterPath, crtSessionName, scriptPath);
		System.out.println(cmd);
		if ( running ) {
			killRunningProcess();
		}

		Process process = null;
		if ( StringUtil.isNotBlank(cmd) ) {
			running = true;
			process = Runtime.getRuntime().exec(cmd);
            if ( runWaitThread ) {
                waitingThread( scriptPath );
            }
		}

        return process;
	}
	
	public void killRunningProcess() {
		if ( null != process ) {
			process.destroy();
		}
        synchronized ( this ) {
            running = false;
            notifyAll();
        }
	}
	
	private void waitingThread(final String path) {
        new Thread() {
            @Override
            public void run() {
                if ( null != process) {
                    int status = 0;
                    try {
                        status = process.waitFor();
                    } catch (InterruptedException e) {
                        StringBuilder sb = new StringBuilder();
                        sb.append( "Script " ).append( path )
                          .append( "executing interrupted :" )
                          .append( e.getMessage()  )
                          .append( "exit code: " )
                          .append( status );
                        ErrorLogger.log( sb.toString() );
                    }
                }
                synchronized ( CrtSession.this ) {
                  CrtSession.this.running = false;
                  CrtSession.this.notifyAll();
                }
            }
        }.start();
	}
	
	public String getCmd(String interpreterPath, String crtSessionName, String scriptPath) {
		StringBuffer sb = new StringBuffer();
		
		if (StringUtil.isNotBlank(interpreterPath) 
				&& StringUtil.isNotBlank(scriptPath) ) {
			sb.append(interpreterPath)
			  .append(_BLANK)
			  .append(_CRT_ARG)
			  .append(_BLANK)
			  .append(scriptPath)
			  .append(_BLANK)
			  .append("/S")
			  .append(_BLANK)
			  .append(crtSessionName);
		}
		
		return sb.toString();
	}

}
