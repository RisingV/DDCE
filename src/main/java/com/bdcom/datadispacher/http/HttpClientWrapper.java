package com.bdcom.datadispacher.http;

import com.bdcom.datadispacher.ServerInfo;
import com.bdcom.pojo.BaseTestRecordForDebug;
import com.bdcom.service.Application;
import com.bdcom.service.ApplicationConstants;
import com.bdcom.util.LocaleUtil;
import com.bdcom.util.StringUtil;
import com.bdcom.util.log.ErrorLogger;
import org.json.JSONException;
import org.json.JSONObject;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2013-3-11 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public class HttpClientWrapper implements ApplicationConstants {
	
	private final static String _HTTP = "http:/";
	
	private final static String _BIZ_URL ="/BDProductionMgr/btclient/basicclient";
	
	private final static String _GET="!getDebugData";
	
	private final static String _DEL="!delDebugData";
	
	private final static String _ADD_DEBUG  = "!newDebugData";
	
	private final static String _WARN="!sendAlert";
	
	private LocalHttpClient client;
	
	private static HttpClientWrapper instance;
	
	public HttpClientWrapper() {
		client = new LocalHttpClient();
	}
	
	public static HttpClientWrapper getInstance() {
		if ( null == instance) {
			instance = new HttpClientWrapper();
			instance.init();
		}
		return instance;
	}
	
	private void init() {
		client.setRequestURL(
				getHttpURL()
			);
	}
	
	public BaseTestRecordForDebug[] getRecordsViaHttp(String serialNo) {
		String jsonRawStr = getByHttp(serialNo);
		if (StringUtil.isNotBlank(jsonRawStr)) {
			return BaseTestRecordForDebug.getRecordArray(jsonRawStr);
		} else {
			return null;
		}
	}
	
	public BaseTestRecordForDebug getRecordViaHttp(String serialNo) {
		String jsonRawStr = getByHttp(serialNo);
		if (StringUtil.isNotBlank(jsonRawStr)) {
			return BaseTestRecordForDebug.getRecord4DbyJsonStr(jsonRawStr);
		} else {
			return null;
		}
	}
	
	public boolean delRecordViaHttp(String serialNo, String random) {
		String result = delByHttp(serialNo, random);
		return getHttpOperStatus(result);
	}
	
	private boolean getHttpOperStatus(String result) {
		if (!StringUtil.isNotBlank(result) ) {
			return false;
		}
		result = fixJsonStr(result);
		JSONObject json = null;
		try {
			json = new JSONObject(result);
			if (_SUCCESS.equals(json.getString(_REQ_STATUS))) {
				return true;
			} else {
				return false;
			}
		} catch (JSONException e) {
			json = null;
			ErrorLogger.log("delRecordViaHttp:" + e.getMessage());
		} finally {
			if ( null == json) {
				return false;
			}
		}
		return false; //can't reach here
	}
	
	private String getByHttp(String serialNo) {
		 return client.appendReqURL(_GET)
					  .addGetParams(_NAME, getUserName())
					  .addGetParams(_NUM, serialNo)
					  .doGetRequest();
	}
	
	private String delByHttp(String serialNo, String random) {
		  return client.appendReqURL(_DEL)
					  .addGetParams(_NAME, getUserName())
					  .addGetParams(_NUM, serialNo)
					  .addGetParams(_RANDOM, random)
					  .doGetRequest();
	}
	
	private String markebugRecByHttp(String serialNo, String random) {
		return client.appendReqURL(_ADD_DEBUG)
					  .addGetParams(_NAME, getUserName())
					  .addGetParams(_NUM, serialNo)
					  .addGetParams(_RANDOM, random)
					  .doGetRequest();
	}
	
	public void clearDebugRecordsViaHttp() {
		  client.appendReqURL(_DEL)
					  .addGetParams(_NAME, getUserName())
					  .doGetRequest();
	}
	
	public boolean markDebugRecViaHttp(String serialNo, String random) {
		String result = markebugRecByHttp(serialNo, random);
		return getHttpOperStatus(result);
	}
	
	public boolean noSceMatchWarning(String serialNo) {
		StringBuffer sb = new StringBuffer();
		sb.append(LocaleUtil.getLocalName(ApplicationConstants.SERIAL_NUM))
		  .append(": ")
		  .append(serialNo)
		  .append(LocaleUtil.getLocalName(NO_SCRIPT_AND_SCE_MATCH));
		
		String result = sendWarnMsgViaHttp(sb.toString());
		return getHttpOperStatus(result);
	}
	
	public String sendWarnMsgViaHttp(String msg) {
		return client.appendReqURL(_WARN)
					  .addGetParams(_NAME, getUserName())
					  .addGetParamsWithValueEncoded(_MSG, msg)
					  .doGetRequest();
	}
	
	private String getHttpURL() {
		StringBuffer sb = new StringBuffer();
		sb.append(_HTTP)
		  .append(ServerInfo.getInetAddr().toString())
		  .append(":8080")
		  .append(_BIZ_URL);
		
		return sb.toString();
	}
	
	private String getUserName() {
        return Application.getStringAttr( USER.USER_NUM );
	}
	
	private static String fixJsonStr(String str) {
		str = str.trim();
		if (str.startsWith("[") || str.endsWith("]")) {
			return str.substring(1,str.length() -1);
		}
		return str;
	}
	
	private static final String _NAME = "loginname";
	private static final String _NUM = "serialNo";
	private static final String _RANDOM = "random";
	private static final String _MSG = "message";
	private static final String _REQ_STATUS = "result";
	private static final String _SUCCESS = "success";
	
	private static final String NO_SCRIPT_AND_SCE_MATCH = "can't find any script or sce match!";
}
