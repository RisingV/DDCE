package com.bdcom.datadispacher.http;

import org.apache.http.NameValuePair;
import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.http.protocol.HTTP;

import java.io.IOException;
import java.net.URI;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2013-3-11 <br>
 * Auto-Generated by eclipse Juno <br>
 */
 
public class LocalHttpClient {
	
	private HttpClient client;
	
	private HttpGet httpget;
	
	private HttpPost httppost;
	
	private List <NameValuePair> postParams;
	
	private String host;
	
	private String url;

	private ResponseHandler<String> responseHandler;
	
	public LocalHttpClient() {
		init();
	}

	private void init() {
		client = new DefaultHttpClient();
		httpget = new HttpGet();
		httppost = new HttpPost();
		postParams = new ArrayList<NameValuePair>();
		responseHandler = new BasicResponseHandler();
	}
	
	public LocalHttpClient setRequestURL(String url) {
		this.url = url;
		this.host = url;
		return this;
	}
	
	public LocalHttpClient appendReqURL(String extra) {
		this.url = new StringBuffer(url).append(extra).toString();
		return this;
	}
	
	public LocalHttpClient addGetParamsWithValueEncoded(String key, String value) {
		@SuppressWarnings("deprecation")
		String encode = URLEncoder.encode(value);
		return addGetParams(key,encode);
	}
	
	public LocalHttpClient addGetParams(String key, String value) {
		if ( null == this.url) {
			return this;
		}
		StringBuffer sb = new StringBuffer(url);
		if (url.indexOf('?') < 0) {
			sb.append("?").append(key).append("=").append(value);
		} else {
			sb.append("&").append(key).append("=").append(value);
		}
		this.url = sb.toString();
		return this;
	}
	
	public void clearGetParams() {
		this.url = this.host;
	}
	
	public LocalHttpClient addPostParams(String key, String value) {
		postParams.add(new BasicNameValuePair(key, value));
		return this;
	}
	
	public void clearPostParams() {
		postParams.clear();
	}
	
	@SuppressWarnings("finally")
	public String doGetRequest() {
		if ( null == url ) {
			return null;
		} else {
			URI uri = URI.create(url);
			httpget.setURI(uri);
		}
		System.out.println("http requset: " + url);
		
		String res = null;
		try {
			res = client.execute(httpget, responseHandler);
		} catch (ClientProtocolException e) {
			res = null;
			e.printStackTrace();
		} catch (IOException e) {
			res = null;
			e.printStackTrace();
		} finally {
			clearGetParams();
			return res;
		}
	}
	
	@SuppressWarnings({ "deprecation", "finally" })
	public String doPostRequest() {
		if ( null == url ) {
			return null;
		} else {
			URI uri = URI.create(url);
			httppost.setURI(uri);
		}
		
		String res = null;
		try {
			httppost.setEntity(new UrlEncodedFormEntity(postParams, HTTP.UTF_8));
			res = client.execute(httppost, responseHandler);
		} catch (ClientProtocolException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			clearPostParams();
			return res;
		}
	}
	
}
