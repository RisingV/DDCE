package com.bdcom.util;

import com.bdcom.util.log.ErrorLogger;

import java.io.*;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-10-31 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public abstract class SerializeUtil {

    public static byte[] fileToByteArray(File file) throws IOException {
        FileInputStream fis = new FileInputStream(file);
        ByteArrayOutputStream bos = new ByteArrayOutputStream();

        byte[] buf = new byte[1024];
        for (int readNum; (readNum = fis.read(buf)) != -1;) {
            bos.write(buf, 0, readNum);
        }
        byte[] bytes = bos.toByteArray();

        return bytes;
    }

    public static File byteArrayToFile(byte[] bytes, File file) throws IOException {
        FileOutputStream fos = new FileOutputStream(file);
        fos.write(bytes);
        fos.flush();
        fos.close();

        return file;
    }
	
	public static void serializeToFile(Object tobeCache, String cacheFilePath) {
		File cacheFile = new File(cacheFilePath);
		if (!cacheFile.exists()) {
			try {
				cacheFile.createNewFile();
			} catch (IOException e) {
                ErrorLogger.log(e.getMessage());
			}
		}
		try {
			FileOutputStream fos = new FileOutputStream(cacheFile);
			ObjectOutputStream oos =  new ObjectOutputStream(fos);   
            oos.writeObject(tobeCache);
            oos.flush();
            oos.close();   
		} catch (FileNotFoundException e) {
            ErrorLogger.log(e.getMessage());
		} catch (IOException e) {
            ErrorLogger.log(e.getMessage());
		}
	}

	public static Object deserializeFromFile(String cacheFilePath) {
		File cacheFile = new File(cacheFilePath);
		
		return deserializeFromFile(cacheFile);
	}
	
	public static Object deserializeFromFile(File cacheFile) {
		Object cachedObj = null;
		if (!cacheFile.exists()) {
			return null;
		}
		
		try {
			FileInputStream fis = new FileInputStream(cacheFile);
			ObjectInputStream ois = new ObjectInputStream(fis);
			cachedObj = ois.readObject();
			ois.close();
		} catch (FileNotFoundException e) {
			System.err.println(e.getMessage());
		} catch (IOException e) {
			System.err.println(e.getMessage());
		} catch (ClassNotFoundException e) {
			System.err.println(e.getMessage());
		}

		return cachedObj;
	}
	
	public static void delSerializedFile(String cacheFilePath) {
		File cacheFile = new File(cacheFilePath);
		if (cacheFile.exists()) {
			cacheFile.delete();
		}
	}

    public static byte[] serializeToByteArray(Object obj) throws IOException {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        ObjectOutputStream os = new ObjectOutputStream(out);
        os.writeObject(obj);

        return out.toByteArray();
    }

    public static Object deserializeFromByteArray(byte[] data) throws IOException, ClassNotFoundException {
        ByteArrayInputStream in = new ByteArrayInputStream(data);
        ObjectInputStream is = new ObjectInputStream(in);

        return is.readObject();
    }
}

