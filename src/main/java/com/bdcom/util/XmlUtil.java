package com.bdcom.util;

import com.bdcom.datadispacher.CommunicateStatus;
import com.bdcom.util.log.ErrorLogger;
import org.dom4j.Document;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;
import org.dom4j.tree.DefaultDocument;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.*;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-11-27 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public abstract class XmlUtil 
					implements CommunicateStatus {
	
	private static OutputFormat format;
	
	private static File cacheFile;
	
	private static SAXReader saxReader;
	
	private static Document cacheDoc;
	
	static {
		format = OutputFormat.createPrettyPrint();  
		saxReader = new SAXReader();
	}
	
	public static int saveXml(Document doc, File xmlFile ) {
		int status = _NOT_DONE_YET;
		if ( null == doc || null == xmlFile ) {
			return status;
		}
		
		XMLWriter output = null;   
	    try {
			output = new XMLWriter(new FileWriter(xmlFile), format);
			output.write(doc);
			output.close();
		} catch (IOException e) {
			status = SCRIPT_CONF_FILE_SAVE_FAIL;
			ErrorLogger.log(e.getMessage());
		} finally {
			if ( status < 0 ) {
				return status;
			}
		}
	    status = _SCRIPT_ADDED_SUCCESS;
	    
	    return status;
	}
	
	public static String getElemValue(String[] elemChain, File xmlFile) {
		Element elem = getElem(elemChain, xmlFile);
		if ( null != elem ) {
			return elem.getText();
		} else {
			return null;
		}
	}
	
	public static  Set<Map<String, String>> getElemValueSet(String[] elemChain, File xmlFile) {
		List<Element> elemList = getElems(elemChain, xmlFile);
		if ( null == elemList || elemList.isEmpty() ) {
			return null;
		}
		
		Set<Map<String, String>> valueSet = new LinkedHashSet<Map<String, String>>();
		for ( Element elem : elemList ) {
			if ( null != elem ) {
				Map<String, String> elemValues = new HashMap<String, String>();
				@SuppressWarnings("unchecked")
				List<Element> childElemList = elem.elements();
				if ( null != childElemList ) {
					for (Element celem : childElemList) {
						elemValues.put(
								celem.getName(), 
								celem.getText()
								);
					}
				}
				valueSet.add(elemValues);
			}
		}
		
		return valueSet;
	}
	
	public static int setElemText(String[] elemChain, String text, File xmlFile) {
		int status = _NOT_DONE_YET;
		if ( null == elemChain ) {
			return status;
		}
		Element elem = getElem(elemChain, xmlFile);
		
		if ( null != elem ) {
			elem.setText(text);
			status = saveXml(cacheDoc, xmlFile);
		} 
		return status;
	}
	
	public static int addElem(String[] elemChain, String[] subElems, String[] subElemsValue, File xmlFile) {
		int status = _NOT_DONE_YET;
		if ( null == elemChain ||
			 null == subElems || 
			 subElems.length != subElemsValue.length ) {
			return status;
		}
		Document doc = getDocument(xmlFile);
		if ( null == doc ) {
			return _SCRIPT_PARSE_ERROR;
		}
		
		Element root = doc.getRootElement();
		if ( null == root || !root.getName().equals(elemChain[0]) ) {
			root = doc.addElement(elemChain[0]);
		}
		
		Element elem = root;
		Element addedElem = null;
		for ( int i=1; i < elemChain.length ; i++ ) {
			addedElem = elem.element(elemChain[i]);
			if ( null == addedElem || i == elemChain.length -1) {
				elem = elem.addElement(elemChain[i]);
			} else {
				elem = addedElem;
			}
		}
		
		Element tmpElem = null;
		for ( int j=0; j < subElems.length; j++ ) {
			tmpElem = elem.addElement(subElems[j]);
			tmpElem.setText(subElemsValue[j]);
		}
		
		status = saveXml(doc, xmlFile);
		return status;
	}
	
	public static int removeElemByText(String[] elemChain, String text, File xmlFile) {
		int status = _NOT_DONE_YET;
		if ( null == elemChain || 
				elemChain.length == 0 ||
				!StringUtil.isNotBlank(text) ) {
			return _NOT_DONE_YET;
		}
		String[] subElemChain = new String[elemChain.length - 1];
		String[] subElemChain2 = null;
		if ( elemChain.length >= 2 ) {
			subElemChain2 = new String[elemChain.length - 2];
		} else {
			subElemChain2 = new String[0];
		}
				
		String lastElem = elemChain[elemChain.length - 1];
		for ( int i=0; i < subElemChain.length; i++ ) {
			subElemChain[i] = elemChain[i];
		}
		for ( int j=0; j < subElemChain2.length; j++ ) {
			subElemChain2[j] = elemChain[j];
		}
		List<Element> elemList = getElems(subElemChain, xmlFile);
		Element parentElem = getElem(subElemChain2, xmlFile);
		if ( null != elemList ) {
			String tmpText = null;
			for ( Element elem : elemList ) {
				Element elem2 = elem.element(lastElem);
				if ( null != elem2 ) {
					tmpText = elem2.getText();
					if ( text.equals(tmpText) ) {
						parentElem.remove(elem);
						break;
					}
				}
			}
			status = saveXml(cacheDoc, xmlFile);
		}
		if ( status > 0 ) {
			return _SCRIPT_REMOVE_SUCCESS;
		} else {
			return status;
		}
	} 
	
	public static List<Element> getElems(String[] elemChain, File xmlFile) {
		if ( null == elemChain ) {
			return null;
		}
			
		Document doc = getDocument(xmlFile);
		
		if ( null == doc ) {
			return null;
		}
			
		List<Element> elemList = null;
		Element elem = doc.getRootElement();
		for ( int i=0; i < elemChain.length; i++ ) {
			if ( i == elemChain.length-1 && null!= elem) {
				elemList = getElems(elemChain[i], elem);
				break;
			}
			elem = getElem(elemChain[i], elem);
			if ( null != elem) {
				continue;
			} else {
				return null;
			}
		}
		
		return elemList;
	}
	
	public static Element getElem(String[] elemChain, File xmlFile) {
		if ( null == elemChain ) {
			return null;
		}
		
		Document doc = getDocument(xmlFile);
		
		if ( null == doc ) {
			return null;
		}
		
		Element elem = doc.getRootElement();
		for ( int i=0; i < elemChain.length; i++ ) {
			elem = getElem(elemChain[i], elem);
			if ( null != elem) {
				continue;
			} else {
				return null;
			}
		}
		
		return elem;
	}
	
	private static Element getElem(String elemName, Element elem) {
		return elem.element(elemName);
	}
	
	@SuppressWarnings("unchecked")
	private static List<Element> getElems(String elemName, Element elem) {
		return elem.elements(elemName);
	}
	
	private static Document getDocument(File xmlFile) {
		if ( null == xmlFile || !xmlFile.exists() ) {
				return null;
		}
		
		if ( xmlFile.length() == 0 ) {
			return new DefaultDocument();
		}
		
		Document doc = null;
		if ( xmlFile.equals(cacheFile) && null != cacheDoc) {
			doc = cacheDoc;
		} else {
			try {
				doc = saxReader.read(xmlFile);
			} catch (DocumentException e) {
				ErrorLogger.log(e.getMessage());
			} finally {
				if ( null == doc ) {
					return null;
				} 
			}
			cacheFile = xmlFile;
			cacheDoc = doc;
		}
		
		return doc;
	}
	
}
