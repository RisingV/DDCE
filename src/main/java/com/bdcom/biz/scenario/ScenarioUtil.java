package com.bdcom.biz.scenario;

import com.bdcom.datadispacher.CommuniConstants;
import com.bdcom.biz.pojo.Scenario;
import com.bdcom.util.log.ErrorLogger;
import com.bdcom.biz.pojo.BaseTestRecord;
import com.bdcom.biz.pojo.Dumb;
import com.bdcom.biz.pojo.ForceToBeAttr;

import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-11-14 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public class ScenarioUtil {
	
	private static String[] attrArray;
	
	private static String[] attrArrayWithfixedAttr;
	
	public static BaseTestRecord mergePreProvidedScenario(
			BaseTestRecord record, Scenario scenario) {
		BaseTestRecord newRec = new BaseTestRecord();
		if ( null == scenario ) {
			return record;
		}
		Class<?> dataClazz = record.getClass();
		Set<String> sceFieldNames = scenario.getAttrNames();
		String[] allAttrs = getAllAttrs();
		for (String fieldName : allAttrs) {
			Field field = null;
			try {
				field = dataClazz.getDeclaredField(fieldName);
				field.setAccessible(true);
				if ( sceFieldNames.contains(fieldName) ) {
					String sceValue = scenario.getAttr(fieldName);
					field.set(newRec, sceValue);
				} else {
					String fieldValue = record.getAttrByFieldName(fieldName);
					field.set(newRec, fieldValue);
				}
			} catch (SecurityException e) {
				ErrorLogger.log(e.getMessage());
			} catch (NoSuchFieldException e) {
				ErrorLogger.log(e.getMessage());
			} catch (IllegalArgumentException e) {
				ErrorLogger.log(e.getMessage());
			} catch (IllegalAccessException e) {
				ErrorLogger.log(e.getMessage());
			}
		}
		return newRec;
	}
	
	public static String[] getFocusedAttrs() {
		if ( null == attrArray ) {
			List<String> attrList = new ArrayList<String>();
			Field[] attrs = BaseTestRecord.class.getDeclaredFields();
			for (Field attr : attrs) {
				Dumb dumb = attr.getAnnotation(Dumb.class);
				if (null == dumb) {
					attrList.add(attr.getName());
				}
			}
			
			attrArray = new String[attrList.size()];
			attrList.toArray(attrArray);
		}
		return attrArray;
	}
	
	public static String[] getAllAttrs() {
		if ( null == attrArrayWithfixedAttr ) {
			List<String> attrList = new ArrayList<String>();
			Field[] attrs = BaseTestRecord.class.getDeclaredFields();
			for (Field attr : attrs) {
				Dumb dumb = attr.getAnnotation(Dumb.class);
				if (null == dumb) {
					attrList.add(attr.getName());
				} else {
					ForceToBeAttr forceTobeAttr = 
							attr.getAnnotation(ForceToBeAttr.class);
					if ( null != forceTobeAttr ) {
						attrList.add(attr.getName());
					}
				}
			}
			
			attrArrayWithfixedAttr = new String[attrList.size()];
			attrList.toArray(attrArrayWithfixedAttr);
		}
		return attrArrayWithfixedAttr;
	}
	
	public static Scenario createNamedScenario(
			String name, Map<String, String> attrs) {
		Scenario sce = createAnonymousScenario(attrs);
		sce.setScenarioName(name);
		return sce;
	}
	
	public static Scenario createAnonymousScenario(
			Map<String, String> attrs) {
		Scenario sce = new Scenario();
		sce.setRestrictAttr(attrs);
		return sce;
	}
	
	public static void wrapSce(String revStr, Scenario scenario) {
		String spt = CommuniConstants.SEPARATOR;
		int si = revStr.indexOf(spt);
		String key = revStr.substring(0, si);
		String value = revStr.substring(si + spt.length());
		if ( key.equals(value) ) {
			scenario.setScenarioName(key);
			return;
		}
		scenario.putAttr(key, value);
	}
}
