package com.bdcom.biz.script;

import com.bdcom.datadispacher.CommunicateStatus;
import com.bdcom.sys.Applicable;
import com.bdcom.sys.ApplicationConstants;
import com.bdcom.util.log.ErrorLogger;
import com.bdcom.biz.script.interpreter.DefaultInteractor;
import com.bdcom.biz.script.interpreter.ScriptInteractor;
import com.bdcom.biz.script.interpreter.ScriptInterpreter;
import com.bdcom.biz.script.session.CrtSession;
import com.bdcom.util.StringUtil;

import java.io.File;
import java.io.IOException;
import java.util.*;
import java.util.Map.Entry;
import java.util.concurrent.TimeUnit;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-11-19 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public class ScriptExecutor implements CommunicateStatus, ApplicationConstants {
	
	private ScriptInteractor scriptInteractor;
	
	private static ScriptInterpreter nullInterpreter;
	
	private Map<String, CrtSession> crtSessions;
	
	private boolean rsGot;
	
	Queue<String> msgQue;

	private Set<String> serialNumSet;

    private ScriptMgr scriptMgr;

    private final Applicable app;
	
	public ScriptExecutor(Applicable app) {
        this.app = app;
		scriptInteractor = new DefaultInteractor();
		crtSessions = new HashMap<String, CrtSession>();
		msgQue = new LinkedList<String>();
	}

	public int execute(String[] crts, String serialNum) {
			
		int status = _NOT_DONE_YET;
		
		if ( null == crts || 0 == crts.length ) {
			return status;
		}
		
		DefaultInteractor si =	(DefaultInteractor) scriptInteractor;
		
		if ( !getScriptMgr().isDefaultConfigFileExists() ) {
			return _SCRIPT_CONF_NOT_FOUND;
		}
		
		String scriptPath = getScriptMgr().getScriptBySerialNum(serialNum);
		if ( null == scriptPath || 
				!StringUtil.isNotBlank(scriptPath)
				) {
			return _NO_MATCHED_SCRIPT;
		}
		
		File testFile = new File(scriptPath);
		if ( !testFile.exists() ) {
			return _SCRIPT_FILE_NOT_FOUND;
		}
		
		if ( app.getBoolAttr( USER.SUPERVISOR ) ) {
			if ( null == serialNumSet ) {
				serialNumSet = new HashSet<String>();
				addToAppContent(serialNumSet);
			}
			serialNumSet.add(serialNum);
		}

		si.setInput(
				new String[] {getTesterNum()}
				);

		for ( String crt : crts ) {
			CrtSession crtSess = crtSessions.get(crt);
			if ( null == crtSess ) {
				crtSess = new CrtSession();
				crtSess.setCrtSessionName(crt); 
				crtSessions.put(crt, crtSess);
			}
			crtSess.setInterpreterPath(
				getScriptMgr().getDefaultConfigedIptPath()
					);
			try {
				crtSess.runScript(scriptPath);
			} catch (IOException e) {
				ErrorLogger.log(e.getMessage());
				status += _SCRIPT_EXECUTION_FAIL;
			} catch (InterruptedException e) {
				ErrorLogger.log(e.getMessage());
				status += _SCRIPT_EXECUTION_FAIL;
			} 
		}
		
		if ( status == crts.length * _SCRIPT_EXECUTION_FAIL ) {
			return _SCRIPT_EXECUTION_FAIL;
		} else {
			return _SUCCESS;
		}

//		dp.setRawStrings( si.getOutput() );
//		result = dp.parse();
		
//		return _SUCCESS;
	}
	
	public void killAllRunningScript() {
		if ( crtSessions.isEmpty() ) {
			return;
		}
		for (Entry<String, CrtSession> e : crtSessions.entrySet()) {
			CrtSession crt = e.getValue();
			if ( crt.isRunning() ) {
				crt.killRunningProcess();
			}
		}
	}
	
	public void waiting() {
		while ( isAnyRunning() ) {
			try {
				TimeUnit.SECONDS.sleep(1);
			} catch (InterruptedException e) {
			}
		}
	}
	
	public boolean isAnyRunning() {
		boolean running = false;
		if ( crtSessions.isEmpty() ) {
			return false;
		}
		for (Entry<String, CrtSession> e : crtSessions.entrySet()) {
			CrtSession crt = e.getValue();
			running = running || crt.isRunning();
		}
		return running;
	}

	public void setSendResult(boolean _rsGot, String _rs) {
		rsGot = _rsGot;
		msgQue.offer(_rs);
	}
	
	public int getSendResult() {
		if ( !isAnyRunning() ) {
			return NO_RUNNING_SCRIPT;
		}
		
		int s = 0;
		while (!rsGot ) {
			if ( !isAnyRunning() ) {
				return EXE_DONE;
			}
			s++;
			try {
				TimeUnit.SECONDS.sleep(1);
			} catch (InterruptedException e) {
			}
			System.out.println("getSendResult: waiting for " + s +" s");
		}
		rsGot = false;
		String msgCode = null;
		if ( !msgQue.isEmpty() ) {
			msgCode = msgQue.poll();
		}
		if ( null != msgCode ) {
			return Integer.parseInt(msgCode);
		} else {
			return NO_RUNNING_SCRIPT;
		}
	}

	public ScriptInterpreter getInterperter(String interpreter) {
		if ( null == nullInterpreter ) {
			ScriptInterpreter ipt = new ScriptInterpreter();
			ipt.setInterpreter(interpreter); 
			ipt.setInterpreterPath(
					getScriptMgr().getDefaultConfigedIptPath()
					);
			nullInterpreter = ipt; 
		}
		return nullInterpreter; 
		
	}
	
	public String getTesterNum() {
        return app.getStringAttr( USER.USER_NUM );
	}
	
	private void addToAppContent(final Set<String> set) {
        app.addAttribute( CONTENT.SERIAL_NUM_SET, set );
	}

    private ScriptMgr getScriptMgr() {
        if ( null == scriptMgr ) {
            scriptMgr = (ScriptMgr)
                    app.getAttribute( COMPONENT.SCRIPT_MGR );
        }

        return scriptMgr;
    }
}
