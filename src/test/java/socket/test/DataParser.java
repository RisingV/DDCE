package socket.test;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import socket.test.ext.BdcomSmtAPI;
import socket.test.ext.ISmtFactory;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-10-30 5:56:14 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public class DataParser implements CommuniConstants {
	
	private static final DateFormat DATE_FORMAT = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss"); 
	
	private BdcomSmtAPI saver;
	
	private ISmtFactory isf;
	
	private Basiccompetencetest testcase;
	
	public DataParser(BdcomSmtAPI saver, ISmtFactory isf) {
		super();
		this.saver = saver;
		this.isf = isf;
	}
	
	public int save() {
		System.out.println("saved!");
		int status = 0;
		
		status = 1;
//		if ( null != testcase ) {
//			System.out.println(testcase.getBegintime().toString());
//		}
//		Date endTime = testcase.getEndtime();
//		if (null != endTime) {
//			testcase.setWorkTime(endTime);
//		} else {
//			testcase.setWorkTime(new Date());
//		}
//		if ( null != testcase ) {
//			String boadId = testcase.getSubStrateNo();
//			Substrate substrate =isf.getSubstratebyId(boadId) ;
//			   String status = substrate.getBoardStatus();
//			   if(status == null){
//				   status = "";
//			   }
//			substrate.setBoardStatus(status+"1,");
//			substrate.setWorkTime(new Date());
//			isf.updSubstrateStatuById(substrate);
//			status = saver.saveBaseTestInfo(testcase);
//			testcase = null;
//		}
		if ( status == 4 ) {
			status = -2;
		} else {
			status = status - 1;
		}
		
		status = 2;
		
		return status;
	}
	
	public void parse(String revRawStr) throws ParseException {
		if ( null == testcase ) {
			testcase = new Basiccompetencetest();
		}
		
		String revStr = AuthRecordUtil.removeSessionId(revRawStr);
		String value = null;
		
		value = getValue(TESTER_ID, revStr);
		if (notNull(value)) {
			testcase.setTesterID(value);
			return;
		}
		
		value = getValue(TEST_TYPE, revStr);
		if (notNull(value)) {
			testcase.setTesttype(value);
			return;
		}
		
		value = getValue(BEGIN_TIME, revStr);
		if (notNull(value)) {
			Date date = parseToDate(value);
			testcase.setBegintime(date);
			return;
		}
		
		value = getValue(SCRIPT, revStr);
		if (notNull(value)) {
			testcase.setScript(value);
			return;
		}
		
		value = getValue(TERMINAL_NAME, revStr);
		if (notNull(value)) {
			testcase.setTerminalname(value);
			return;
		}
		
		value = getValue(SERIAL_NO, revStr);
		if (notNull(value)) {
			testcase.setSerialno(value);
			return;
		}
		
		value = getValue(SUB_STRATE_NO, revStr);
		if (notNull(value)) {
			testcase.setSubStrateNo(value);
			return;
		}
		
		value = getValue(EPROM_VER, revStr);
		if (notNull(value)) {
			testcase.setEpromversion(value);
			return;
		}
		
		value = getValue(FLASH_ROOM, revStr);
		if (notNull(value)) {
			testcase.setFlashroom(value);
			return;
		}
		
		value = getValue(SDRA_ROOM, revStr);
		if (notNull(value)) {
			testcase.setSdramroom(value);
			return;
		}
		
		value = getValue(SOFTWARE_INFO, revStr);
		if (notNull(value)) {
			testcase.setSdramroom(value);
			return;
		}
		
		value = getValue(HARDWARE_INFO, revStr);
		if (notNull(value)) {
			testcase.setHardwareinfo(value);
			return;
		}
		
		value = getValue(VERSION, revStr);
		if (notNull(value)) {
			testcase.setVersion(value);
			return;
		}
		
		value = getValue(END_TIME, revStr);
		if (notNull(value)) {
			Date date = parseToDate(value);
			testcase.setEndtime(date);
			return;
		}
		
		value = getValue(IS_PASS, revStr);
		if (notNull(value)) {
			if ("OK".equals(value)) {
				testcase.setIsPass(true);
			} else {
				testcase.setIsPass(false);
			}
			return;
		}
		
		
		
	}
	
	private String getValue(String key, String revStr) {
		if (revStr.startsWith(key)) {
			int si = revStr.indexOf(SEPARATOR);
			return revStr.substring(si + SEPARATOR.length());
		} else {
			return null;
		}
	}
	
	private static boolean notNull(String str) {
		if (null != str) {
			return true;
		}
		else {
			return false;
		}
	}
	
	private static Date parseToDate(String str) throws ParseException {
		Date parsed = null;
		if (null != str && !isBlank(str) && 
				!"null".equalsIgnoreCase(str)) {
			parsed = DATE_FORMAT.parse(str);
		}
		return parsed;
	}
	
	private static boolean isBlank(CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
	
//	public boolean isDataComplete() {
//		if ( null == testcase ) {
//			return false;
//		}
//		
//		if ( !isBlank(testcase.getTesterID()) &&
//			 !isBlank(testcase.getTesttype()) &&
//			 null != testcase.getBegintime() &&
//			 null != testcase.get
//				) {
//			
//		}
//	}
	
	public void  dumpData() {
		testcase = null;
	}
}
