package socket.test;

import socket.test.ext.BdcomSecurityAPI;

import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

/**
 * @author francis yuan <br>
 * E-mail: yuanjiajun@bdcom.com.cn <br>
 * @version 2012-11-22 <br>
 * Auto-Generated by eclipse Juno <br>
 */

public class Authenticator extends AuthRecordUtil implements CommuniConstants {
	
	private static Map<String, String> sessionIDContainer = 
				new ConcurrentHashMap<String, String>();
	
	private BdcomSecurityAPI authIndexer;
	
	public Authenticator(BdcomSecurityAPI authIndexer) {
		this.authIndexer = authIndexer;
	}
	
	public static boolean isAuthorized(String rawString) {
		String sid = getSessionId(rawString);
		if ( null != sessionIDContainer.get(sid) ) {
			return true;
		} else {
			return false;
		}
	}

	public int authenticate(String rawString) {
		if ( !isVaild(rawString) ) {
			return 0;
		}
		
		String usr = getUserName(rawString);
		String pwd = getPassword(rawString);
		String sid = getSessionId(rawString);
		System.out.println("username: "+ usr);
		System.out.println("password: "+ pwd);
		System.out.println("sessionid: "+ sid);
		
//		if ( !isBlank(usr) && !isBlank(pwd) ) {
//			int status = authIndexer.checkEmRight(usr, pwd);
//			 if ( status > 0  ) {
		int status = -1;
		if (usr.equals(pwd)) {
			status = 2;
		} else {
			status = 0;
		}
		if ( status > 0) {
			 sessionIDContainer.put(sid, usr);
		}
//			 }
//			 return status; 
//		} else {
//			return 0;
//		}
				 
		return status;
	}
	
	public static void logout(String rawString) {
		String sid = getSessionId(rawString);
		sessionIDContainer.remove(sid);
	}
	
	public static String removeSessionId(String rawString) {
		int sptIndex = -1;
		if ( null != rawString ) {
			sptIndex = rawString.indexOf(SESSION_SPT);
		}
		if ( sptIndex >= 0 ) {
			return rawString.substring(0, sptIndex);
		} else {
			return rawString;
		}
	}
	
	private static boolean isBlank(CharSequence cs) {
        int strLen;
        if (cs == null || (strLen = cs.length()) == 0) {
            return true;
        }
        for (int i = 0; i < strLen; i++) {
            if (Character.isWhitespace(cs.charAt(i)) == false) {
                return false;
            }
        }
        return true;
    }
	
}
